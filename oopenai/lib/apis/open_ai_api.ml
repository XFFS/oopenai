(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

module Make (Config : Request.Auth) = struct
  module Request = Request.Make (Config)

  let cancel_fine_tune ~fine_tune_id =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fine-tunes/{fine_tune_id}/cancel" in
    let headers = Request.default_headers in
    let uri =
      Request.replace_path_param uri "fine_tune_id" (fun x -> x) fine_tune_id
    in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Fine_tune.of_yojson) resp body

  let create_completion ~create_completion_request_t =
    let open Lwt.Infix in
    let uri = Request.build_uri "/completions" in
    let headers = Request.json_content_headers in
    let body =
      Request.write_as_json_body
        Create_completion_request.to_yojson
        create_completion_request_t
    in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as
      (JsonSupport.unwrap Create_completion_response.of_yojson)
      resp
      body

  let create_edit ~create_edit_request_t =
    let open Lwt.Infix in
    let uri = Request.build_uri "/edits" in
    let headers = Request.json_content_headers in
    let body =
      Request.write_as_json_body
        Create_edit_request.to_yojson
        create_edit_request_t
    in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as
      (JsonSupport.unwrap Create_edit_response.of_yojson)
      resp
      body

  let create_embedding ~create_embedding_request_t =
    let open Lwt.Infix in
    let uri = Request.build_uri "/embeddings" in
    let headers = Request.json_content_headers in
    let body =
      Request.write_as_json_body
        Create_embedding_request.to_yojson
        create_embedding_request_t
    in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as
      (JsonSupport.unwrap Create_embedding_response.of_yojson)
      resp
      body

  let create_file ~file ~purpose =
    let open Lwt.Syntax in
    let uri = Request.build_uri "/files" in
    let filename = String.split_on_char '/' file |> List.rev |> List.hd in
    let* content = Lwt_io.(with_file ~mode:Input file read) in
    let form =
      let file_part = Multipart_form.Part.v ~name:"file" ~filename content in
      let purpose_part = Multipart_form.Part.v ~name:"purpose" purpose in
      Multipart_form.v [ file_part; purpose_part ]
    in
    let headers = Multipart_form.add_header form Request.default_headers in
    let body = Cohttp_lwt.Body.of_string (Multipart_form.to_string form) in
    let* resp, resp_body =
      Cohttp_lwt_unix.Client.call `POST uri ~chunked:false ~headers ~body
    in
    Request.read_json_body_as
      (JsonSupport.unwrap Open_ai_file.of_yojson)
      resp
      resp_body

  let create_fine_tune ~create_fine_tune_request_t =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fine-tunes" in
    let headers = Request.json_content_headers in
    let body =
      Request.write_as_json_body
        Create_fine_tune_request.to_yojson
        create_fine_tune_request_t
    in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Fine_tune.of_yojson) resp body

  let create_image ~create_image_request_t =
    let open Lwt.Infix in
    let uri = Request.build_uri "/images/generations" in
    let headers = Request.json_content_headers in
    let body =
      Request.write_as_json_body
        Create_image_request.to_yojson
        create_image_request_t
    in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as
      (JsonSupport.unwrap Images_response.of_yojson)
      resp
      body

  let create_image_edit ~image ~prompt ?mask ?n ?size ?response_format ?user ()
      =
    let open Lwt.Syntax in
    let uri = Request.build_uri "/images/edits" in

    let image_filename = String.split_on_char '/' image |> List.rev |> List.hd in
    let* image_content = Lwt_io.(with_file ~mode:Input image read) in

    let* mask_part =
    match mask with 
    | None -> Lwt.return None
    | Some mask -> 
    let mask_filename = String.split_on_char '/' mask |> List.rev |> List.hd in
    let+ mask_content = Lwt_io.(with_file ~mode:Input mask read) in
    Some(Multipart_form.Part.v ~name:"mask" ~filename:mask_filename mask_content)
    in 

    let form =
      let image_part = Multipart_form.Part.v ~name:"image" ~filename:image_filename image_content in
      let prompt_part = Multipart_form.Part.v ~name:"prompt" prompt in
      let n_part =
        Option.map
          (fun x -> Multipart_form.Part.v ~name:"n" (Int32.to_string x))
          n
      in
      let size_part =
        Option.map
          (fun x -> Multipart_form.Part.v ~name:"size" (Enums.show_size x))
          size
      in
      let response_format_part =
        Option.map
          (fun x ->
            Multipart_form.Part.v
              ~name:"response_format"
              (Enums.show_response_format x))
          response_format
      in
      let user_part =
        Option.map (fun x -> Multipart_form.Part.v ~name:"user" x) user
      in
      let optional_part =
        List.filter_map
          (fun x -> x)
          [ mask_part; n_part; size_part; response_format_part; user_part ]
      in
      Multipart_form.v (image_part :: prompt_part :: optional_part)
    in
    let headers = Multipart_form.add_header form Request.default_headers in
    let body = Cohttp_lwt.Body.of_string (Multipart_form.to_string form) in
    let* resp, body =
      Cohttp_lwt_unix.Client.call `POST uri ~chunked:false ~headers ~body
    in
    Request.read_json_body_as
      (JsonSupport.unwrap Images_response.of_yojson)
      resp
      body

  let create_image_variation ~image ?n ?size ?response_format ?user () =
    let open Lwt.Syntax in
    let uri = Request.build_uri "/images/variations" in

    let filename = String.split_on_char '/' image |> List.rev |> List.hd in
    let* content = Lwt_io.(with_file ~mode:Input image read) in

    let form =
      let image_part = Multipart_form.Part.v ~name:"image" ~filename content in
      let n_part =
        Option.map
          (fun x -> Multipart_form.Part.v ~name:"n" (Int32.to_string x))
          n
      in
      let size_part =
        Option.map
          (fun x -> Multipart_form.Part.v ~name:"size" (Enums.show_size x))
          size
      in
      let response_format_part =
        Option.map
          (fun x ->
            Multipart_form.Part.v
              ~name:"response_format"
              (Enums.show_response_format x))
          response_format
      in
      let user_part =
        Option.map (fun x -> Multipart_form.Part.v ~name:"user" x) user
      in
      let optional_part =
        List.filter_map
          (fun x -> x)
          [ n_part; size_part; response_format_part; user_part ]
      in
      Multipart_form.v (image_part :: optional_part)
    in
    let headers = Multipart_form.add_header form Request.default_headers in
    let body = Cohttp_lwt.Body.of_string (Multipart_form.to_string form) in
    let* resp, body =
      Cohttp_lwt_unix.Client.call `POST uri ~chunked:false ~headers ~body
    in
    Request.read_json_body_as
      (JsonSupport.unwrap Images_response.of_yojson)
      resp
      body

  let create_moderation ~create_moderation_request_t =
    let open Lwt.Infix in
    let uri = Request.build_uri "/moderations" in
    let headers = Request.json_content_headers in
    let body =
      Request.write_as_json_body
        Create_moderation_request.to_yojson
        create_moderation_request_t
    in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as
      (JsonSupport.unwrap Create_moderation_response.of_yojson)
      resp
      body

  let create_search ~engine_id ~create_search_request_t =
    let open Lwt.Infix in
    let uri = Request.build_uri "/engines/{engine_id}/search" in
    let headers = Request.json_content_headers in
    let uri =
      Request.replace_path_param uri "engine_id" (fun x -> x) engine_id
    in
    let body =
      Request.write_as_json_body
        Create_search_request.to_yojson
        create_search_request_t
    in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as
      (JsonSupport.unwrap Create_search_response.of_yojson)
      resp
      body

  let delete_file ~file_id =
    let open Lwt.Infix in
    let uri = Request.build_uri "/files/{file_id}" in
    let headers = Request.json_content_headers in
    let uri = Request.replace_path_param uri "file_id" (fun x -> x) file_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as
      (JsonSupport.unwrap Delete_file_response.of_yojson)
      resp
      body

  let delete_model ~model =
    let open Lwt.Infix in
    let uri = Request.build_uri "/models/{model}" in
    let headers = Request.json_content_headers in
    let uri = Request.replace_path_param uri "model" (fun x -> x) model in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as
      (JsonSupport.unwrap Delete_model_response.of_yojson)
      resp
      body

  let download_file ~file_id =
    let open Lwt.Infix in
    let uri = Request.build_uri "/files/{file_id}/content" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "file_id" (fun x -> x) file_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as JsonSupport.to_string resp body

  let list_files () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/files" in
    let headers = Request.default_headers in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as
      (JsonSupport.unwrap List_files_response.of_yojson)
      resp
      body

  let list_fine_tune_events ~fine_tune_id ?(stream = false) () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fine-tunes/{fine_tune_id}/events" in
    let headers = Request.default_headers in
    let uri =
      Request.replace_path_param uri "fine_tune_id" (fun x -> x) fine_tune_id
    in
    let uri = Request.add_query_param uri "stream" string_of_bool stream in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as
      (JsonSupport.unwrap List_fine_tune_events_response.of_yojson)
      resp
      body

  let list_fine_tunes () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fine-tunes" in
    let headers = Request.default_headers in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as
      (JsonSupport.unwrap List_fine_tunes_response.of_yojson)
      resp
      body

  let list_models () =
    let open Lwt.Infix in
    let uri = Request.build_uri "/models" in
    let headers = Request.default_headers in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as
      (JsonSupport.unwrap List_models_response.of_yojson)
      resp
      body

  let retrieve_file ~file_id =
    let open Lwt.Infix in
    let uri = Request.build_uri "/files/{file_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "file_id" (fun x -> x) file_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as
      (JsonSupport.unwrap Open_ai_file.of_yojson)
      resp
      body

  let retrieve_fine_tune ~fine_tune_id =
    let open Lwt.Infix in
    let uri = Request.build_uri "/fine-tunes/{fine_tune_id}" in
    let headers = Request.default_headers in
    let uri =
      Request.replace_path_param uri "fine_tune_id" (fun x -> x) fine_tune_id
    in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Fine_tune.of_yojson) resp body

  let retrieve_model ~model =
    let open Lwt.Infix in
    let uri = Request.build_uri "/models/{model}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "model" (fun x -> x) model in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Model.of_yojson) resp body
end
