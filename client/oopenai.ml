let __NOTE__ = "Generated by oooapi at 2024-1-26T23:34:6Z"
let __TITLE__ = "OpenAI API"
let __API_VERSION__ = "2.0.0"

module Data = struct
  let string_of_file (`File n) = n
  let string_of_str (`String n) = n

  module ChatCompletionMessageToolCall = struct
    type function_ =
      { function__name : string
            [@ocaml.doc "The name of the function to call."]
            [@key "name"]
            [@required]
      ; function__arguments : string
            [@ocaml.doc
              "The arguments to call the function with, as generated by the \
               model in JSON format. Note that the model does not always \
               generate valid JSON, and may hallucinate parameters not defined \
               by your function schema. Validate the arguments in your code \
               before calling your function."]
            [@key "arguments"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { id : string
            [@ocaml.doc "The ID of the tool call."] [@key "id"] [@required]
      ; type_ : string
            [@ocaml.doc
              "The type of the tool. Currently, only `function` is supported."]
            [@key "type"]
            [@required]
      ; function_ : function_
            [@ocaml.doc "The function that the model called."]
            [@key "function"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ChatCompletionRequestMessageContentPartImage = struct
    type image_url =
      { image_url_url : [ `String of string ]
            [@ocaml.doc
              "Either a URL of the image or the base64 encoded image data."]
            [@key "url"]
            [@required]
      ; image_url_detail : string option
            [@ocaml.doc
              "Specifies the detail level of the image. Learn more in the \
               [Vision \
               guide](/docs/guides/vision/low-or-high-fidelity-image-understanding)."]
            [@key "detail"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { type_ : string
            [@ocaml.doc "The type of the content part."]
            [@key "type"]
            [@required]
      ; image_url : image_url [@key "image_url"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ChatCompletionRequestMessageContentPartText = struct
    type t =
      { type_ : string
            [@ocaml.doc "The type of the content part."]
            [@key "type"]
            [@required]
      ; text : string [@ocaml.doc "The text content."] [@key "text"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module FunctionParameters = struct
    type t = Yojson.Safe.t [@@deriving yojson { strict = false }]
  end

  module RunStepDetailsToolCallsCodeOutputImageObject = struct
    type image =
      { image_file_id : string
            [@ocaml.doc
              "The [file](/docs/api-reference/files) ID of the image."]
            [@key "file_id"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { type_ : string [@ocaml.doc "Always `image`."] [@key "type"] [@required]
      ; image : image [@key "image"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module RunStepDetailsToolCallsCodeOutputLogsObject = struct
    type t =
      { type_ : string [@ocaml.doc "Always `logs`."] [@key "type"] [@required]
      ; logs : string
            [@ocaml.doc "The text output from the Code Interpreter tool call."]
            [@key "logs"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ChatCompletionMessageToolCalls = struct
    type t = ChatCompletionMessageToolCall.t list
    [@@deriving yojson { strict = false }]
  end

  module ChatCompletionRequestMessageContentPart = struct
    type t = ChatCompletionRequestMessageContentPartText.t
    [@@deriving yojson { strict = false }]
  end

  module FunctionObject = struct
    type t =
      { description : string option
            [@ocaml.doc
              "A description of what the function does, used by the model to \
               choose when and how to call the function."]
            [@key "description"]
            [@yojson.default None]
      ; name : string
            [@ocaml.doc
              "The name of the function to be called. Must be a-z, A-Z, 0-9, \
               or contain underscores and dashes, with a maximum length of 64."]
            [@key "name"]
            [@required]
      ; parameters : FunctionParameters.t option
            [@key "parameters"] [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module MessageContentTextAnnotationsFileCitationObject = struct
    type file_citation =
      { file_citation_file_id : string
            [@ocaml.doc "The ID of the specific File the citation is from."]
            [@key "file_id"]
            [@required]
      ; file_citation_quote : string
            [@ocaml.doc "The specific quote in the file."]
            [@key "quote"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { type_ : string
            [@ocaml.doc "Always `file_citation`."] [@key "type"] [@required]
      ; text : string
            [@ocaml.doc
              "The text in the message content that needs to be replaced."]
            [@key "text"]
            [@required]
      ; file_citation : file_citation [@key "file_citation"] [@required]
      ; start_index : int [@key "start_index"] [@required]
      ; end_index : int [@key "end_index"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module MessageContentTextAnnotationsFilePathObject = struct
    type file_path =
      { file_path_file_id : string
            [@ocaml.doc "The ID of the file that was generated."]
            [@key "file_id"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { type_ : string
            [@ocaml.doc "Always `file_path`."] [@key "type"] [@required]
      ; text : string
            [@ocaml.doc
              "The text in the message content that needs to be replaced."]
            [@key "text"]
            [@required]
      ; file_path : file_path [@key "file_path"] [@required]
      ; start_index : int [@key "start_index"] [@required]
      ; end_index : int [@key "end_index"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module RunStepDetailsToolCallsCodeObject = struct
    type code_interpreter =
      { code_interpreter_input : string
            [@ocaml.doc "The input to the Code Interpreter tool call."]
            [@key "input"]
            [@required]
      ; code_interpreter_outputs : Yojson.Safe.t list
            [@ocaml.doc
              "The outputs from the Code Interpreter tool call. Code \
               Interpreter can output one or more items, including text \
               (`logs`) or images (`image`). Each of these are represented by \
               a different object type."]
            [@key "outputs"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { id : string
            [@ocaml.doc "The ID of the tool call."] [@key "id"] [@required]
      ; type_ : string
            [@ocaml.doc
              "The type of tool call. This is always going to be \
               `code_interpreter` for this type of tool call."]
            [@key "type"]
            [@required]
      ; code_interpreter : code_interpreter
            [@ocaml.doc "The Code Interpreter tool call definition."]
            [@key "code_interpreter"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module RunStepDetailsToolCallsFunctionObject = struct
    type function_ =
      { function__name : string
            [@ocaml.doc "The name of the function."] [@key "name"] [@required]
      ; function__arguments : string
            [@ocaml.doc "The arguments passed to the function."]
            [@key "arguments"]
            [@required]
      ; function__output : string
            [@ocaml.doc
              "The output of the function. This will be `null` if the outputs \
               have not been \
               [submitted](/docs/api-reference/runs/submitToolOutputs) yet."]
            [@key "output"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { id : string
            [@ocaml.doc "The ID of the tool call object."]
            [@key "id"]
            [@required]
      ; type_ : string
            [@ocaml.doc
              "The type of tool call. This is always going to be `function` \
               for this type of tool call."]
            [@key "type"]
            [@required]
      ; function_ : function_
            [@ocaml.doc "The definition of the function that was called."]
            [@key "function"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module RunStepDetailsToolCallsRetrievalObject = struct
    type retrieval = Yojson.Safe.t [@@deriving yojson { strict = false }]

    type t =
      { id : string
            [@ocaml.doc "The ID of the tool call object."]
            [@key "id"]
            [@required]
      ; type_ : string
            [@ocaml.doc
              "The type of tool call. This is always going to be `retrieval` \
               for this type of tool call."]
            [@key "type"]
            [@required]
      ; retrieval : retrieval
            [@ocaml.doc "For now, this is always going to be an empty object."]
            [@key "retrieval"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module AssistantToolsCode = struct
    type t =
      { type_ : string
            [@ocaml.doc "The type of tool being defined: `code_interpreter`"]
            [@key "type"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module AssistantToolsFunction = struct
    type t =
      { type_ : string
            [@ocaml.doc "The type of tool being defined: `function`"]
            [@key "type"]
            [@required]
      ; function_ : FunctionObject.t [@key "function"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module AssistantToolsRetrieval = struct
    type t =
      { type_ : string
            [@ocaml.doc "The type of tool being defined: `retrieval`"]
            [@key "type"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ChatCompletionMessageToolCallChunk = struct
    type function_ =
      { function__name : string option
            [@ocaml.doc "The name of the function to call."]
            [@key "name"]
            [@yojson.default None]
      ; function__arguments : string option
            [@ocaml.doc
              "The arguments to call the function with, as generated by the \
               model in JSON format. Note that the model does not always \
               generate valid JSON, and may hallucinate parameters not defined \
               by your function schema. Validate the arguments in your code \
               before calling your function."]
            [@key "arguments"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { index : int [@key "index"] [@required]
      ; id : string option
            [@ocaml.doc "The ID of the tool call."]
            [@key "id"]
            [@yojson.default None]
      ; type_ : string option
            [@ocaml.doc
              "The type of the tool. Currently, only `function` is supported."]
            [@key "type"]
            [@yojson.default None]
      ; function_ : function_ option [@key "function"] [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ChatCompletionNamedToolChoice = struct
    type function_ =
      { function__name : string
            [@ocaml.doc "The name of the function to call."]
            [@key "name"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { type_ : string
            [@ocaml.doc
              "The type of the tool. Currently, only `function` is supported."]
            [@key "type"]
            [@required]
      ; function_ : function_ [@key "function"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ChatCompletionRequestAssistantMessage = struct
    type function_call =
      { function_call_arguments : string
            [@ocaml.doc
              "The arguments to call the function with, as generated by the \
               model in JSON format. Note that the model does not always \
               generate valid JSON, and may hallucinate parameters not defined \
               by your function schema. Validate the arguments in your code \
               before calling your function."]
            [@key "arguments"]
            [@required]
      ; function_call_name : string
            [@ocaml.doc "The name of the function to call."]
            [@key "name"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { content : string option
            [@ocaml.doc
              "The contents of the assistant message. Required unless \
               `tool_calls` or `function_call` is specified.\n"]
            [@key "content"]
            [@yojson.default None]
      ; role : string
            [@ocaml.doc
              "The role of the messages author, in this case `assistant`."]
            [@key "role"]
            [@required]
      ; name : string option
            [@ocaml.doc
              "An optional name for the participant. Provides the model \
               information to differentiate between participants of the same \
               role."]
            [@key "name"]
            [@yojson.default None]
      ; tool_calls : ChatCompletionMessageToolCalls.t option
            [@key "tool_calls"] [@yojson.default None]
      ; function_call : function_call option
            [@ocaml.doc
              "Deprecated and replaced by `tool_calls`. The name and arguments \
               of a function that should be called, as generated by the model."]
            [@key "function_call"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ChatCompletionRequestFunctionMessage = struct
    type t =
      { role : string
            [@ocaml.doc
              "The role of the messages author, in this case `function`."]
            [@key "role"]
            [@required]
      ; content : string
            [@ocaml.doc "The contents of the function message."]
            [@key "content"]
            [@required]
      ; name : string
            [@ocaml.doc "The name of the function to call."]
            [@key "name"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ChatCompletionRequestSystemMessage = struct
    type t =
      { content : string
            [@ocaml.doc "The contents of the system message."]
            [@key "content"]
            [@required]
      ; role : string
            [@ocaml.doc
              "The role of the messages author, in this case `system`."]
            [@key "role"]
            [@required]
      ; name : string option
            [@ocaml.doc
              "An optional name for the participant. Provides the model \
               information to differentiate between participants of the same \
               role."]
            [@key "name"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ChatCompletionRequestToolMessage = struct
    type t =
      { role : string
            [@ocaml.doc "The role of the messages author, in this case `tool`."]
            [@key "role"]
            [@required]
      ; content : string
            [@ocaml.doc "The contents of the tool message."]
            [@key "content"]
            [@required]
      ; tool_call_id : string
            [@ocaml.doc "Tool call that this message is responding to."]
            [@key "tool_call_id"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ChatCompletionRequestUserMessage = struct
    type t =
      { content : string
            [@ocaml.doc "The contents of the user message.\n"]
            [@key "content"]
            [@required]
      ; role : string
            [@ocaml.doc "The role of the messages author, in this case `user`."]
            [@key "role"]
            [@required]
      ; name : string option
            [@ocaml.doc
              "An optional name for the participant. Provides the model \
               information to differentiate between participants of the same \
               role."]
            [@key "name"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module CreateMessageRequest = struct
    type metadata = Yojson.Safe.t [@@deriving yojson { strict = false }]

    type t =
      { role : string
            [@ocaml.doc
              "The role of the entity that is creating the message. Currently \
               only `user` is supported."]
            [@key "role"]
            [@required]
      ; content : string
            [@ocaml.doc "The content of the message."]
            [@key "content"]
            [@required]
      ; file_ids : string list option
            [@ocaml.doc
              "A list of [File](/docs/api-reference/files) IDs that the \
               message should use. There can be a maximum of 10 files attached \
               to a message. Useful for tools like `retrieval` and \
               `code_interpreter` that can access and use files."]
            [@key "file_ids"]
            [@yojson.default None]
      ; metadata : metadata option option
            [@ocaml.doc
              "Set of 16 key-value pairs that can be attached to an object. \
               This can be useful for storing additional information about the \
               object in a structured format. Keys can be a maximum of 64 \
               characters long and values can be a maxium of 512 characters \
               long.\n"]
            [@key "metadata"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module MessageContentImageFileObject = struct
    type image_file =
      { image_file_file_id : string
            [@ocaml.doc
              "The [File](/docs/api-reference/files) ID of the image in the \
               message content."]
            [@key "file_id"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { type_ : string
            [@ocaml.doc "Always `image_file`."] [@key "type"] [@required]
      ; image_file : image_file [@key "image_file"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module MessageContentTextObject = struct
    type text =
      { text_value : string
            [@ocaml.doc "The data that makes up the text."]
            [@key "value"]
            [@required]
      ; text_annotations :
          MessageContentTextAnnotationsFileCitationObject.t list
            [@key "annotations"] [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { type_ : string [@ocaml.doc "Always `text`."] [@key "type"] [@required]
      ; text : text [@key "text"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module RunCompletionUsage = struct
    type t =
      { completion_tokens : int
            [@ocaml.doc
              "Number of completion tokens used over the course of the run."]
            [@key "completion_tokens"]
            [@required]
      ; prompt_tokens : int
            [@ocaml.doc
              "Number of prompt tokens used over the course of the run."]
            [@key "prompt_tokens"]
            [@required]
      ; total_tokens : int
            [@ocaml.doc "Total number of tokens used (prompt + completion)."]
            [@key "total_tokens"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module RunStepCompletionUsage = struct
    type t =
      { completion_tokens : int
            [@ocaml.doc
              "Number of completion tokens used over the course of the run \
               step."]
            [@key "completion_tokens"]
            [@required]
      ; prompt_tokens : int
            [@ocaml.doc
              "Number of prompt tokens used over the course of the run step."]
            [@key "prompt_tokens"]
            [@required]
      ; total_tokens : int
            [@ocaml.doc "Total number of tokens used (prompt + completion)."]
            [@key "total_tokens"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module RunStepDetailsMessageCreationObject = struct
    type message_creation =
      { message_creation_message_id : string
            [@ocaml.doc
              "The ID of the message that was created by this run step."]
            [@key "message_id"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { type_ : string
            [@ocaml.doc "Always `message_creation`."] [@key "type"] [@required]
      ; message_creation : message_creation
            [@key "message_creation"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module RunStepDetailsToolCallsObject = struct
    type t =
      { type_ : string
            [@ocaml.doc "Always `tool_calls`."] [@key "type"] [@required]
      ; tool_calls : Yojson.Safe.t list
            [@ocaml.doc
              "An array of tool calls the run step was involved in. These can \
               be associated with one of three types of tools: \
               `code_interpreter`, `retrieval`, or `function`.\n"]
            [@key "tool_calls"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module RunToolCallObject = struct
    type function_ =
      { function__name : string
            [@ocaml.doc "The name of the function."] [@key "name"] [@required]
      ; function__arguments : string
            [@ocaml.doc
              "The arguments that the model expects you to pass to the \
               function."]
            [@key "arguments"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { id : string
            [@ocaml.doc
              "The ID of the tool call. This ID must be referenced when you \
               submit the tool outputs in using the [Submit tool outputs to \
               run](/docs/api-reference/runs/submitToolOutputs) endpoint."]
            [@key "id"]
            [@required]
      ; type_ : string
            [@ocaml.doc
              "The type of tool call the output is required for. For now, this \
               is always `function`."]
            [@key "type"]
            [@required]
      ; function_ : function_
            [@ocaml.doc "The function definition."]
            [@key "function"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module AssistantFileObject = struct
    type t =
      { id : string
            [@ocaml.doc
              "The identifier, which can be referenced in API endpoints."]
            [@key "id"]
            [@required]
      ; object_ : string
            [@ocaml.doc "The object type, which is always `assistant.file`."]
            [@key "object"]
            [@required]
      ; created_at : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) for when the assistant file was \
               created."]
            [@key "created_at"]
            [@required]
      ; assistant_id : string
            [@ocaml.doc "The assistant ID that the file is attached to."]
            [@key "assistant_id"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module AssistantObject = struct
    type metadata = Yojson.Safe.t [@@deriving yojson { strict = false }]

    type t =
      { id : string
            [@ocaml.doc
              "The identifier, which can be referenced in API endpoints."]
            [@key "id"]
            [@required]
      ; object_ : string
            [@ocaml.doc "The object type, which is always `assistant`."]
            [@key "object"]
            [@required]
      ; created_at : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) for when the assistant was \
               created."]
            [@key "created_at"]
            [@required]
      ; name : string
            [@ocaml.doc
              "The name of the assistant. The maximum length is 256 characters.\n"]
            [@key "name"]
            [@required]
      ; description : string
            [@ocaml.doc
              "The description of the assistant. The maximum length is 512 \
               characters.\n"]
            [@key "description"]
            [@required]
      ; model : string
            [@ocaml.doc
              "ID of the model to use. You can use the [List \
               models](/docs/api-reference/models/list) API to see all of your \
               available models, or see our [Model \
               overview](/docs/models/overview) for descriptions of them.\n"]
            [@key "model"]
            [@required]
      ; instructions : string
            [@ocaml.doc
              "The system instructions that the assistant uses. The maximum \
               length is 32768 characters.\n"]
            [@key "instructions"]
            [@required]
      ; tools : AssistantToolsCode.t list
            [@ocaml.doc
              "A list of tool enabled on the assistant. There can be a maximum \
               of 128 tools per assistant. Tools can be of types \
               `code_interpreter`, `retrieval`, or `function`.\n"]
            [@key "tools"]
            [@required]
      ; file_ids : string list
            [@ocaml.doc
              "A list of [file](/docs/api-reference/files) IDs attached to \
               this assistant. There can be a maximum of 20 files attached to \
               the assistant. Files are ordered by their creation date in \
               ascending order.\n"]
            [@key "file_ids"]
            [@required]
      ; metadata : metadata option
            [@ocaml.doc
              "Set of 16 key-value pairs that can be attached to an object. \
               This can be useful for storing additional information about the \
               object in a structured format. Keys can be a maximum of 64 \
               characters long and values can be a maxium of 512 characters \
               long.\n"]
            [@key "metadata"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ChatCompletionFunctionCallOption = struct
    type t =
      { name : string
            [@ocaml.doc "The name of the function to call."]
            [@key "name"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ChatCompletionFunctions = struct
    type t =
      { description : string option
            [@ocaml.doc
              "A description of what the function does, used by the model to \
               choose when and how to call the function."]
            [@key "description"]
            [@yojson.default None]
      ; name : string
            [@ocaml.doc
              "The name of the function to be called. Must be a-z, A-Z, 0-9, \
               or contain underscores and dashes, with a maximum length of 64."]
            [@key "name"]
            [@required]
      ; parameters : FunctionParameters.t option
            [@key "parameters"] [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ChatCompletionRequestMessage = struct
    type t = ChatCompletionRequestSystemMessage.t
    [@@deriving yojson { strict = false }]
  end

  module ChatCompletionResponseMessage = struct
    type function_call =
      { function_call_arguments : string
            [@ocaml.doc
              "The arguments to call the function with, as generated by the \
               model in JSON format. Note that the model does not always \
               generate valid JSON, and may hallucinate parameters not defined \
               by your function schema. Validate the arguments in your code \
               before calling your function."]
            [@key "arguments"]
            [@required]
      ; function_call_name : string
            [@ocaml.doc "The name of the function to call."]
            [@key "name"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { content : string
            [@ocaml.doc "The contents of the message."]
            [@key "content"]
            [@required]
      ; tool_calls : ChatCompletionMessageToolCalls.t option
            [@key "tool_calls"] [@yojson.default None]
      ; role : string
            [@ocaml.doc "The role of the author of this message."]
            [@key "role"]
            [@required]
      ; function_call : function_call option
            [@ocaml.doc
              "Deprecated and replaced by `tool_calls`. The name and arguments \
               of a function that should be called, as generated by the model."]
            [@key "function_call"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ChatCompletionStreamResponseDelta = struct
    type function_call =
      { function_call_arguments : string option
            [@ocaml.doc
              "The arguments to call the function with, as generated by the \
               model in JSON format. Note that the model does not always \
               generate valid JSON, and may hallucinate parameters not defined \
               by your function schema. Validate the arguments in your code \
               before calling your function."]
            [@key "arguments"]
            [@yojson.default None]
      ; function_call_name : string option
            [@ocaml.doc "The name of the function to call."]
            [@key "name"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { content : string option
            [@ocaml.doc "The contents of the chunk message."]
            [@key "content"]
            [@yojson.default None]
      ; function_call : function_call option
            [@ocaml.doc
              "Deprecated and replaced by `tool_calls`. The name and arguments \
               of a function that should be called, as generated by the model."]
            [@key "function_call"]
            [@yojson.default None]
      ; tool_calls : ChatCompletionMessageToolCallChunk.t list option
            [@key "tool_calls"] [@yojson.default None]
      ; role : string option
            [@ocaml.doc "The role of the author of this message."]
            [@key "role"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ChatCompletionTokenLogprob = struct
    type top_logprobs_item =
      { top_logprobs_item_token : string
            [@ocaml.doc "The token."] [@key "token"] [@required]
      ; top_logprobs_item_logprob : float
            [@ocaml.doc "The log probability of this token."]
            [@key "logprob"]
            [@required]
      ; top_logprobs_item_bytes : int list
            [@ocaml.doc
              "A list of integers representing the UTF-8 bytes representation \
               of the token. Useful in instances where characters are \
               represented by multiple tokens and their byte representations \
               must be combined to generate the correct text representation. \
               Can be `null` if there is no bytes representation for the \
               token."]
            [@key "bytes"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { token : string [@ocaml.doc "The token."] [@key "token"] [@required]
      ; logprob : float
            [@ocaml.doc "The log probability of this token."]
            [@key "logprob"]
            [@required]
      ; bytes : int list
            [@ocaml.doc
              "A list of integers representing the UTF-8 bytes representation \
               of the token. Useful in instances where characters are \
               represented by multiple tokens and their byte representations \
               must be combined to generate the correct text representation. \
               Can be `null` if there is no bytes representation for the \
               token."]
            [@key "bytes"]
            [@required]
      ; top_logprobs : top_logprobs_item list
            [@ocaml.doc
              "List of the most likely tokens and their log probability, at \
               this token position. In rare cases, there may be fewer than the \
               number of requested `top_logprobs` returned."]
            [@key "top_logprobs"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ChatCompletionTool = struct
    type t =
      { type_ : string
            [@ocaml.doc
              "The type of the tool. Currently, only `function` is supported."]
            [@key "type"]
            [@required]
      ; function_ : FunctionObject.t [@key "function"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ChatCompletionToolChoiceOption = struct
    type t = string [@@deriving yojson { strict = false }]
  end

  module CompletionUsage = struct
    type t =
      { completion_tokens : int
            [@ocaml.doc "Number of tokens in the generated completion."]
            [@key "completion_tokens"]
            [@required]
      ; prompt_tokens : int
            [@ocaml.doc "Number of tokens in the prompt."]
            [@key "prompt_tokens"]
            [@required]
      ; total_tokens : int
            [@ocaml.doc
              "Total number of tokens used in the request (prompt + \
               completion)."]
            [@key "total_tokens"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module CreateThreadRequest = struct
    type metadata = Yojson.Safe.t [@@deriving yojson { strict = false }]

    type t =
      { messages : CreateMessageRequest.t list option
            [@ocaml.doc
              "A list of [messages](/docs/api-reference/messages) to start the \
               thread with."]
            [@key "messages"]
            [@yojson.default None]
      ; metadata : metadata option option
            [@ocaml.doc
              "Set of 16 key-value pairs that can be attached to an object. \
               This can be useful for storing additional information about the \
               object in a structured format. Keys can be a maximum of 64 \
               characters long and values can be a maxium of 512 characters \
               long.\n"]
            [@key "metadata"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module Embedding = struct
    type t =
      { index : int
            [@ocaml.doc "The index of the embedding in the list of embeddings."]
            [@key "index"]
            [@required]
      ; embedding : float list
            [@ocaml.doc
              "The embedding vector, which is a list of floats. The length of \
               vector depends on the model as listed in the [embedding \
               guide](/docs/guides/embeddings).\n"]
            [@key "embedding"]
            [@required]
      ; object_ : string
            [@ocaml.doc "The object type, which is always \"embedding\"."]
            [@key "object"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module Error = struct
    type t =
      { code : string [@key "code"] [@required]
      ; message : string [@key "message"] [@required]
      ; param : string [@key "param"] [@required]
      ; type_ : string [@key "type"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module FineTuningJob = struct
    type error =
      { error_code : string
            [@ocaml.doc "A machine-readable error code."]
            [@key "code"]
            [@required]
      ; error_message : string
            [@ocaml.doc "A human-readable error message."]
            [@key "message"]
            [@required]
      ; error_param : string
            [@ocaml.doc
              "The parameter that was invalid, usually `training_file` or \
               `validation_file`. This field will be null if the failure was \
               not parameter-specific."]
            [@key "param"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type hyperparameters =
      { hyperparameters_n_epochs : string
            [@ocaml.doc
              "The number of epochs to train the model for. An epoch refers to \
               one full cycle through the training dataset.\n\
               \"auto\" decides the optimal number of epochs based on the size \
               of the dataset. If setting the number manually, we support any \
               number between 1 and 50 epochs."]
            [@key "n_epochs"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { id : string
            [@ocaml.doc
              "The object identifier, which can be referenced in the API \
               endpoints."]
            [@key "id"]
            [@required]
      ; created_at : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) for when the fine-tuning job \
               was created."]
            [@key "created_at"]
            [@required]
      ; error : error option
            [@ocaml.doc
              "For fine-tuning jobs that have `failed`, this will contain more \
               information on the cause of the failure."]
            [@key "error"]
            [@required]
      ; fine_tuned_model : string
            [@ocaml.doc
              "The name of the fine-tuned model that is being created. The \
               value will be null if the fine-tuning job is still running."]
            [@key "fine_tuned_model"]
            [@required]
      ; finished_at : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) for when the fine-tuning job \
               was finished. The value will be null if the fine-tuning job is \
               still running."]
            [@key "finished_at"]
            [@required]
      ; hyperparameters : hyperparameters
            [@ocaml.doc
              "The hyperparameters used for the fine-tuning job. See the \
               [fine-tuning guide](/docs/guides/fine-tuning) for more details."]
            [@key "hyperparameters"]
            [@required]
      ; model : string
            [@ocaml.doc "The base model that is being fine-tuned."]
            [@key "model"]
            [@required]
      ; object_ : string
            [@ocaml.doc "The object type, which is always \"fine_tuning.job\"."]
            [@key "object"]
            [@required]
      ; organization_id : string
            [@ocaml.doc "The organization that owns the fine-tuning job."]
            [@key "organization_id"]
            [@required]
      ; result_files : string list
            [@ocaml.doc
              "The compiled results file ID(s) for the fine-tuning job. You \
               can retrieve the results with the [Files \
               API](/docs/api-reference/files/retrieve-contents)."]
            [@key "result_files"]
            [@required]
      ; status : string
            [@ocaml.doc
              "The current status of the fine-tuning job, which can be either \
               `validating_files`, `queued`, `running`, `succeeded`, `failed`, \
               or `cancelled`."]
            [@key "status"]
            [@required]
      ; trained_tokens : int
            [@ocaml.doc
              "The total number of billable tokens processed by this \
               fine-tuning job. The value will be null if the fine-tuning job \
               is still running."]
            [@key "trained_tokens"]
            [@required]
      ; training_file : string
            [@ocaml.doc
              "The file ID used for training. You can retrieve the training \
               data with the [Files \
               API](/docs/api-reference/files/retrieve-contents)."]
            [@key "training_file"]
            [@required]
      ; validation_file : string
            [@ocaml.doc
              "The file ID used for validation. You can retrieve the \
               validation results with the [Files \
               API](/docs/api-reference/files/retrieve-contents)."]
            [@key "validation_file"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module FineTuningJobEvent = struct
    type t =
      { id : string [@key "id"] [@required]
      ; created_at : int [@key "created_at"] [@required]
      ; level : string [@key "level"] [@required]
      ; message : string [@key "message"] [@required]
      ; object_ : string [@key "object"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module Image = struct
    type t =
      { b64_json : string option
            [@ocaml.doc
              "The base64-encoded JSON of the generated image, if \
               `response_format` is `b64_json`."]
            [@key "b64_json"]
            [@yojson.default None]
      ; url : string option
            [@ocaml.doc
              "The URL of the generated image, if `response_format` is `url` \
               (default)."]
            [@key "url"]
            [@yojson.default None]
      ; revised_prompt : string option
            [@ocaml.doc
              "The prompt that was used to generate the image, if there was \
               any revision to the prompt."]
            [@key "revised_prompt"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module MessageFileObject = struct
    type t =
      { id : string
            [@ocaml.doc
              "The identifier, which can be referenced in API endpoints."]
            [@key "id"]
            [@required]
      ; object_ : string
            [@ocaml.doc
              "The object type, which is always `thread.message.file`."]
            [@key "object"]
            [@required]
      ; created_at : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) for when the message file was \
               created."]
            [@key "created_at"]
            [@required]
      ; message_id : string
            [@ocaml.doc
              "The ID of the [message](/docs/api-reference/messages) that the \
               [File](/docs/api-reference/files) is attached to."]
            [@key "message_id"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module MessageObject = struct
    type metadata = Yojson.Safe.t [@@deriving yojson { strict = false }]

    type t =
      { id : string
            [@ocaml.doc
              "The identifier, which can be referenced in API endpoints."]
            [@key "id"]
            [@required]
      ; object_ : string
            [@ocaml.doc "The object type, which is always `thread.message`."]
            [@key "object"]
            [@required]
      ; created_at : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) for when the message was \
               created."]
            [@key "created_at"]
            [@required]
      ; thread_id : string
            [@ocaml.doc
              "The [thread](/docs/api-reference/threads) ID that this message \
               belongs to."]
            [@key "thread_id"]
            [@required]
      ; role : string
            [@ocaml.doc
              "The entity that produced the message. One of `user` or \
               `assistant`."]
            [@key "role"]
            [@required]
      ; content : MessageContentImageFileObject.t list
            [@ocaml.doc
              "The content of the message in array of text and/or images."]
            [@key "content"]
            [@required]
      ; assistant_id : string
            [@ocaml.doc
              "If applicable, the ID of the \
               [assistant](/docs/api-reference/assistants) that authored this \
               message."]
            [@key "assistant_id"]
            [@required]
      ; run_id : string
            [@ocaml.doc
              "If applicable, the ID of the [run](/docs/api-reference/runs) \
               associated with the authoring of this message."]
            [@key "run_id"]
            [@required]
      ; file_ids : string list
            [@ocaml.doc
              "A list of [file](/docs/api-reference/files) IDs that the \
               assistant should use. Useful for tools like retrieval and \
               code_interpreter that can access files. A maximum of 10 files \
               can be attached to a message."]
            [@key "file_ids"]
            [@required]
      ; metadata : metadata option
            [@ocaml.doc
              "Set of 16 key-value pairs that can be attached to an object. \
               This can be useful for storing additional information about the \
               object in a structured format. Keys can be a maximum of 64 \
               characters long and values can be a maxium of 512 characters \
               long.\n"]
            [@key "metadata"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module Model = struct
    type t =
      { id : string
            [@ocaml.doc
              "The model identifier, which can be referenced in the API \
               endpoints."]
            [@key "id"]
            [@required]
      ; created : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) when the model was created."]
            [@key "created"]
            [@required]
      ; object_ : string
            [@ocaml.doc "The object type, which is always \"model\"."]
            [@key "object"]
            [@required]
      ; owned_by : string
            [@ocaml.doc "The organization that owns the model."]
            [@key "owned_by"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module OpenAIFile = struct
    type t =
      { id : string
            [@ocaml.doc
              "The file identifier, which can be referenced in the API \
               endpoints."]
            [@key "id"]
            [@required]
      ; bytes : int
            [@ocaml.doc "The size of the file, in bytes."]
            [@key "bytes"]
            [@required]
      ; created_at : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) for when the file was created."]
            [@key "created_at"]
            [@required]
      ; filename : string
            [@ocaml.doc "The name of the file."] [@key "filename"] [@required]
      ; object_ : string
            [@ocaml.doc "The object type, which is always `file`."]
            [@key "object"]
            [@required]
      ; purpose : string
            [@ocaml.doc
              "The intended purpose of the file. Supported values are \
               `fine-tune`, `fine-tune-results`, `assistants`, and \
               `assistants_output`."]
            [@key "purpose"]
            [@required]
      ; status : string
            [@ocaml.doc
              "Deprecated. The current status of the file, which can be either \
               `uploaded`, `processed`, or `error`."]
            [@key "status"]
            [@required]
      ; status_details : string option
            [@ocaml.doc
              "Deprecated. For details on why a fine-tuning training file \
               failed validation, see the `error` field on `fine_tuning.job`."]
            [@key "status_details"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module RunObject = struct
    type submit_tool_outputs =
      { submit_tool_outputs_tool_calls : RunToolCallObject.t list
            [@ocaml.doc "A list of the relevant tool calls."]
            [@key "tool_calls"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type required_action =
      { required_action_type_ : string
            [@ocaml.doc "For now, this is always `submit_tool_outputs`."]
            [@key "type"]
            [@required]
      ; required_action_submit_tool_outputs : submit_tool_outputs
            [@ocaml.doc
              "Details on the tool outputs needed for this run to continue."]
            [@key "submit_tool_outputs"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type last_error =
      { last_error_code : string
            [@ocaml.doc "One of `server_error` or `rate_limit_exceeded`."]
            [@key "code"]
            [@required]
      ; last_error_message : string
            [@ocaml.doc "A human-readable description of the error."]
            [@key "message"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type metadata = Yojson.Safe.t [@@deriving yojson { strict = false }]

    type t =
      { id : string
            [@ocaml.doc
              "The identifier, which can be referenced in API endpoints."]
            [@key "id"]
            [@required]
      ; object_ : string
            [@ocaml.doc "The object type, which is always `thread.run`."]
            [@key "object"]
            [@required]
      ; created_at : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) for when the run was created."]
            [@key "created_at"]
            [@required]
      ; thread_id : string
            [@ocaml.doc
              "The ID of the [thread](/docs/api-reference/threads) that was \
               executed on as a part of this run."]
            [@key "thread_id"]
            [@required]
      ; assistant_id : string
            [@ocaml.doc
              "The ID of the [assistant](/docs/api-reference/assistants) used \
               for execution of this run."]
            [@key "assistant_id"]
            [@required]
      ; status : string
            [@ocaml.doc
              "The status of the run, which can be either `queued`, \
               `in_progress`, `requires_action`, `cancelling`, `cancelled`, \
               `failed`, `completed`, or `expired`."]
            [@key "status"]
            [@required]
      ; required_action : required_action option
            [@ocaml.doc
              "Details on the action required to continue the run. Will be \
               `null` if no action is required."]
            [@key "required_action"]
            [@required]
      ; last_error : last_error option
            [@ocaml.doc
              "The last error associated with this run. Will be `null` if \
               there are no errors."]
            [@key "last_error"]
            [@required]
      ; expires_at : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) for when the run will expire."]
            [@key "expires_at"]
            [@required]
      ; started_at : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) for when the run was started."]
            [@key "started_at"]
            [@required]
      ; cancelled_at : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) for when the run was cancelled."]
            [@key "cancelled_at"]
            [@required]
      ; failed_at : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) for when the run failed."]
            [@key "failed_at"]
            [@required]
      ; completed_at : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) for when the run was completed."]
            [@key "completed_at"]
            [@required]
      ; model : string
            [@ocaml.doc
              "The model that the [assistant](/docs/api-reference/assistants) \
               used for this run."]
            [@key "model"]
            [@required]
      ; instructions : string
            [@ocaml.doc
              "The instructions that the \
               [assistant](/docs/api-reference/assistants) used for this run."]
            [@key "instructions"]
            [@required]
      ; tools : AssistantToolsCode.t list
            [@ocaml.doc
              "The list of tools that the \
               [assistant](/docs/api-reference/assistants) used for this run."]
            [@key "tools"]
            [@required]
      ; file_ids : string list
            [@ocaml.doc
              "The list of [File](/docs/api-reference/files) IDs the \
               [assistant](/docs/api-reference/assistants) used for this run."]
            [@key "file_ids"]
            [@required]
      ; metadata : metadata option
            [@ocaml.doc
              "Set of 16 key-value pairs that can be attached to an object. \
               This can be useful for storing additional information about the \
               object in a structured format. Keys can be a maximum of 64 \
               characters long and values can be a maxium of 512 characters \
               long.\n"]
            [@key "metadata"]
            [@required]
      ; usage : RunCompletionUsage.t [@key "usage"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module RunStepObject = struct
    type last_error =
      { last_error_code : string
            [@ocaml.doc "One of `server_error` or `rate_limit_exceeded`."]
            [@key "code"]
            [@required]
      ; last_error_message : string
            [@ocaml.doc "A human-readable description of the error."]
            [@key "message"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type metadata = Yojson.Safe.t [@@deriving yojson { strict = false }]

    type t =
      { id : string
            [@ocaml.doc
              "The identifier of the run step, which can be referenced in API \
               endpoints."]
            [@key "id"]
            [@required]
      ; object_ : string
            [@ocaml.doc "The object type, which is always `thread.run.step`."]
            [@key "object"]
            [@required]
      ; created_at : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) for when the run step was \
               created."]
            [@key "created_at"]
            [@required]
      ; assistant_id : string
            [@ocaml.doc
              "The ID of the [assistant](/docs/api-reference/assistants) \
               associated with the run step."]
            [@key "assistant_id"]
            [@required]
      ; thread_id : string
            [@ocaml.doc
              "The ID of the [thread](/docs/api-reference/threads) that was \
               run."]
            [@key "thread_id"]
            [@required]
      ; run_id : string
            [@ocaml.doc
              "The ID of the [run](/docs/api-reference/runs) that this run \
               step is a part of."]
            [@key "run_id"]
            [@required]
      ; type_ : string
            [@ocaml.doc
              "The type of run step, which can be either `message_creation` or \
               `tool_calls`."]
            [@key "type"]
            [@required]
      ; status : string
            [@ocaml.doc
              "The status of the run step, which can be either `in_progress`, \
               `cancelled`, `failed`, `completed`, or `expired`."]
            [@key "status"]
            [@required]
      ; step_details : Yojson.Safe.t
            [@ocaml.doc "The details of the run step."]
            [@key "step_details"]
            [@required]
      ; last_error : last_error option
            [@ocaml.doc
              "The last error associated with this run step. Will be `null` if \
               there are no errors."]
            [@key "last_error"]
            [@required]
      ; expired_at : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) for when the run step expired. \
               A step is considered expired if the parent run is expired."]
            [@key "expired_at"]
            [@required]
      ; cancelled_at : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) for when the run step was \
               cancelled."]
            [@key "cancelled_at"]
            [@required]
      ; failed_at : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) for when the run step failed."]
            [@key "failed_at"]
            [@required]
      ; completed_at : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) for when the run step completed."]
            [@key "completed_at"]
            [@required]
      ; metadata : metadata option
            [@ocaml.doc
              "Set of 16 key-value pairs that can be attached to an object. \
               This can be useful for storing additional information about the \
               object in a structured format. Keys can be a maximum of 64 \
               characters long and values can be a maxium of 512 characters \
               long.\n"]
            [@key "metadata"]
            [@required]
      ; usage : RunStepCompletionUsage.t [@key "usage"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ThreadObject = struct
    type metadata = Yojson.Safe.t [@@deriving yojson { strict = false }]

    type t =
      { id : string
            [@ocaml.doc
              "The identifier, which can be referenced in API endpoints."]
            [@key "id"]
            [@required]
      ; object_ : string
            [@ocaml.doc "The object type, which is always `thread`."]
            [@key "object"]
            [@required]
      ; created_at : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) for when the thread was created."]
            [@key "created_at"]
            [@required]
      ; metadata : metadata option
            [@ocaml.doc
              "Set of 16 key-value pairs that can be attached to an object. \
               This can be useful for storing additional information about the \
               object in a structured format. Keys can be a maximum of 64 \
               characters long and values can be a maxium of 512 characters \
               long.\n"]
            [@key "metadata"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ChatCompletionRole = struct
    type t = string [@@deriving yojson { strict = false }]
  end

  module CreateAssistantFileRequest = struct
    type t =
      { file_id : string
            [@ocaml.doc
              "A [File](/docs/api-reference/files) ID (with \
               `purpose=\"assistants\"`) that the assistant should use. Useful \
               for tools like `retrieval` and `code_interpreter` that can \
               access files."]
            [@key "file_id"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module CreateAssistantRequest = struct
    type metadata = Yojson.Safe.t [@@deriving yojson { strict = false }]

    type t =
      { model : string
            [@ocaml.doc
              "ID of the model to use. You can use the [List \
               models](/docs/api-reference/models/list) API to see all of your \
               available models, or see our [Model \
               overview](/docs/models/overview) for descriptions of them.\n"]
            [@key "model"]
            [@required]
      ; name : string option
            [@ocaml.doc
              "The name of the assistant. The maximum length is 256 characters.\n"]
            [@key "name"]
            [@yojson.default None]
      ; description : string option
            [@ocaml.doc
              "The description of the assistant. The maximum length is 512 \
               characters.\n"]
            [@key "description"]
            [@yojson.default None]
      ; instructions : string option
            [@ocaml.doc
              "The system instructions that the assistant uses. The maximum \
               length is 32768 characters.\n"]
            [@key "instructions"]
            [@yojson.default None]
      ; tools : AssistantToolsCode.t list option
            [@ocaml.doc
              "A list of tool enabled on the assistant. There can be a maximum \
               of 128 tools per assistant. Tools can be of types \
               `code_interpreter`, `retrieval`, or `function`.\n"]
            [@key "tools"]
            [@yojson.default None]
      ; file_ids : string list option
            [@ocaml.doc
              "A list of [file](/docs/api-reference/files) IDs attached to \
               this assistant. There can be a maximum of 20 files attached to \
               the assistant. Files are ordered by their creation date in \
               ascending order.\n"]
            [@key "file_ids"]
            [@yojson.default None]
      ; metadata : metadata option option
            [@ocaml.doc
              "Set of 16 key-value pairs that can be attached to an object. \
               This can be useful for storing additional information about the \
               object in a structured format. Keys can be a maximum of 64 \
               characters long and values can be a maxium of 512 characters \
               long.\n"]
            [@key "metadata"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module CreateChatCompletionFunctionResponse = struct
    type choices_item =
      { choices_item_finish_reason : string
            [@ocaml.doc
              "The reason the model stopped generating tokens. This will be \
               `stop` if the model hit a natural stop point or a provided stop \
               sequence, `length` if the maximum number of tokens specified in \
               the request was reached, `content_filter` if content was \
               omitted due to a flag from our content filters, or \
               `function_call` if the model called a function.\n"]
            [@key "finish_reason"]
            [@required]
      ; choices_item_index : int
            [@ocaml.doc "The index of the choice in the list of choices."]
            [@key "index"]
            [@required]
      ; choices_item_message : ChatCompletionResponseMessage.t
            [@key "message"] [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { id : string
            [@ocaml.doc "A unique identifier for the chat completion."]
            [@key "id"]
            [@required]
      ; choices : choices_item list
            [@ocaml.doc
              "A list of chat completion choices. Can be more than one if `n` \
               is greater than 1."]
            [@key "choices"]
            [@required]
      ; created : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) of when the chat completion was \
               created."]
            [@key "created"]
            [@required]
      ; model : string
            [@ocaml.doc "The model used for the chat completion."]
            [@key "model"]
            [@required]
      ; system_fingerprint : string option
            [@ocaml.doc
              "This fingerprint represents the backend configuration that the \
               model runs with.\n\n\
               Can be used in conjunction with the `seed` request parameter to \
               understand when backend changes have been made that might \
               impact determinism.\n"]
            [@key "system_fingerprint"]
            [@yojson.default None]
      ; object_ : string
            [@ocaml.doc "The object type, which is always `chat.completion`."]
            [@key "object"]
            [@required]
      ; usage : CompletionUsage.t option [@key "usage"] [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module CreateChatCompletionImageResponse = struct
    type t = Yojson.Safe.t [@@deriving yojson { strict = false }]
  end

  module CreateChatCompletionRequest = struct
    type logit_bias = Yojson.Safe.t [@@deriving yojson { strict = false }]

    type response_format =
      { response_format_type_ : string option
            [@ocaml.doc "Must be one of `text` or `json_object`."]
            [@key "type"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { messages : ChatCompletionRequestMessage.t list
            [@ocaml.doc
              "A list of messages comprising the conversation so far. [Example \
               Python \
               code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models)."]
            [@key "messages"]
            [@required]
      ; model : string
            [@ocaml.doc
              "ID of the model to use. See the [model endpoint \
               compatibility](/docs/models/model-endpoint-compatibility) table \
               for details on which models work with the Chat API."]
            [@key "model"]
            [@required]
      ; frequency_penalty : float option
            [@ocaml.doc
              "Number between -2.0 and 2.0. Positive values penalize new \
               tokens based on their existing frequency in the text so far, \
               decreasing the model's likelihood to repeat the same line \
               verbatim.\n\n\
               [See more information about frequency and presence \
               penalties.](/docs/guides/text-generation/parameter-details)\n"]
            [@key "frequency_penalty"]
            [@yojson.default None]
      ; logit_bias : logit_bias option option
            [@ocaml.doc
              "Modify the likelihood of specified tokens appearing in the \
               completion.\n\n\
               Accepts a JSON object that maps tokens (specified by their \
               token ID in the tokenizer) to an associated bias value from \
               -100 to 100. Mathematically, the bias is added to the logits \
               generated by the model prior to sampling. The exact effect will \
               vary per model, but values between -1 and 1 should decrease or \
               increase likelihood of selection; values like -100 or 100 \
               should result in a ban or exclusive selection of the relevant \
               token.\n"]
            [@key "logit_bias"]
            [@yojson.default None]
      ; logprobs : bool option
            [@ocaml.doc
              "Whether to return log probabilities of the output tokens or \
               not. If true, returns the log probabilities of each output \
               token returned in the `content` of `message`. This option is \
               currently not available on the `gpt-4-vision-preview` model."]
            [@key "logprobs"]
            [@yojson.default None]
      ; top_logprobs : int option
            [@ocaml.doc
              "An integer between 0 and 5 specifying the number of most likely \
               tokens to return at each token position, each with an \
               associated log probability. `logprobs` must be set to `true` if \
               this parameter is used."]
            [@key "top_logprobs"]
            [@yojson.default None]
      ; max_tokens : int option
            [@ocaml.doc
              "The maximum number of [tokens](/tokenizer) that can be \
               generated in the chat completion.\n\n\
               The total length of input tokens and generated tokens is \
               limited by the model's context length. [Example Python \
               code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) \
               for counting tokens.\n"]
            [@key "max_tokens"]
            [@yojson.default None]
      ; n : int option
            [@ocaml.doc
              "How many chat completion choices to generate for each input \
               message. Note that you will be charged based on the number of \
               generated tokens across all of the choices. Keep `n` as `1` to \
               minimize costs."]
            [@key "n"]
            [@yojson.default None]
      ; presence_penalty : float option
            [@ocaml.doc
              "Number between -2.0 and 2.0. Positive values penalize new \
               tokens based on whether they appear in the text so far, \
               increasing the model's likelihood to talk about new topics.\n\n\
               [See more information about frequency and presence \
               penalties.](/docs/guides/text-generation/parameter-details)\n"]
            [@key "presence_penalty"]
            [@yojson.default None]
      ; response_format : response_format option
            [@ocaml.doc
              "An object specifying the format that the model must output. \
               Compatible with `gpt-4-1106-preview` and `gpt-3.5-turbo-1106`.\n\n\
               Setting to `{ \"type\": \"json_object\" }` enables JSON mode, \
               which guarantees the message the model generates is valid \
               JSON.\n\n\
               **Important:** when using JSON mode, you **must** also instruct \
               the model to produce JSON yourself via a system or user \
               message. Without this, the model may generate an unending \
               stream of whitespace until the generation reaches the token \
               limit, resulting in a long-running and seemingly \"stuck\" \
               request. Also note that the message content may be partially \
               cut off if `finish_reason=\"length\"`, which indicates the \
               generation exceeded `max_tokens` or the conversation exceeded \
               the max context length.\n"]
            [@key "response_format"]
            [@yojson.default None]
      ; seed : int option
            [@ocaml.doc
              "This feature is in Beta.\n\
               If specified, our system will make a best effort to sample \
               deterministically, such that repeated requests with the same \
               `seed` and parameters should return the same result.\n\
               Determinism is not guaranteed, and you should refer to the \
               `system_fingerprint` response parameter to monitor changes in \
               the backend.\n"]
            [@key "seed"]
            [@yojson.default None]
      ; stop : string option
            [@ocaml.doc
              "Up to 4 sequences where the API will stop generating further \
               tokens.\n"]
            [@key "stop"]
            [@yojson.default None]
      ; stream : bool option
            [@ocaml.doc
              "If set, partial message deltas will be sent, like in ChatGPT. \
               Tokens will be sent as data-only [server-sent \
               events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) \
               as they become available, with the stream terminated by a \
               `data: [DONE]` message. [Example Python \
               code](https://cookbook.openai.com/examples/how_to_stream_completions).\n"]
            [@key "stream"]
            [@yojson.default None]
      ; temperature : float option
            [@ocaml.doc
              "What sampling temperature to use, between 0 and 2. Higher \
               values like 0.8 will make the output more random, while lower \
               values like 0.2 will make it more focused and deterministic.\n\n\
               We generally recommend altering this or `top_p` but not both.\n"]
            [@key "temperature"]
            [@yojson.default None]
      ; top_p : float option
            [@ocaml.doc
              "An alternative to sampling with temperature, called nucleus \
               sampling, where the model considers the results of the tokens \
               with top_p probability mass. So 0.1 means only the tokens \
               comprising the top 10% probability mass are considered.\n\n\
               We generally recommend altering this or `temperature` but not \
               both.\n"]
            [@key "top_p"]
            [@yojson.default None]
      ; tools : ChatCompletionTool.t list option
            [@ocaml.doc
              "A list of tools the model may call. Currently, only functions \
               are supported as a tool. Use this to provide a list of \
               functions the model may generate JSON inputs for.\n"]
            [@key "tools"]
            [@yojson.default None]
      ; tool_choice : ChatCompletionToolChoiceOption.t option
            [@key "tool_choice"] [@yojson.default None]
      ; user : string option
            [@ocaml.doc
              "A unique identifier representing your end-user, which can help \
               OpenAI to monitor and detect abuse. [Learn \
               more](/docs/guides/safety-best-practices/end-user-ids).\n"]
            [@key "user"]
            [@yojson.default None]
      ; function_call : string option
            [@ocaml.doc
              "Deprecated in favor of `tool_choice`.\n\n\
               Controls which (if any) function is called by the model.\n\
               `none` means the model will not call a function and instead \
               generates a message.\n\
               `auto` means the model can pick between generating a message or \
               calling a function.\n\
               Specifying a particular function via `{\"name\": \
               \"my_function\"}` forces the model to call that function.\n\n\
               `none` is the default when no functions are present. `auto` is \
               the default if functions are present.\n"]
            [@key "function_call"]
            [@yojson.default None]
      ; functions : ChatCompletionFunctions.t list option
            [@ocaml.doc
              "Deprecated in favor of `tools`.\n\n\
               A list of functions the model may generate JSON inputs for.\n"]
            [@key "functions"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module CreateChatCompletionResponse = struct
    type logprobs =
      { logprobs_content : ChatCompletionTokenLogprob.t list
            [@ocaml.doc
              "A list of message content tokens with log probability \
               information."]
            [@key "content"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type choices_item =
      { choices_item_finish_reason : string
            [@ocaml.doc
              "The reason the model stopped generating tokens. This will be \
               `stop` if the model hit a natural stop point or a provided stop \
               sequence,\n\
               `length` if the maximum number of tokens specified in the \
               request was reached,\n\
               `content_filter` if content was omitted due to a flag from our \
               content filters,\n\
               `tool_calls` if the model called a tool, or `function_call` \
               (deprecated) if the model called a function.\n"]
            [@key "finish_reason"]
            [@required]
      ; choices_item_index : int
            [@ocaml.doc "The index of the choice in the list of choices."]
            [@key "index"]
            [@required]
      ; choices_item_message : ChatCompletionResponseMessage.t
            [@key "message"] [@required]
      ; choices_item_logprobs : logprobs option
            [@ocaml.doc "Log probability information for the choice."]
            [@key "logprobs"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { id : string
            [@ocaml.doc "A unique identifier for the chat completion."]
            [@key "id"]
            [@required]
      ; choices : choices_item list
            [@ocaml.doc
              "A list of chat completion choices. Can be more than one if `n` \
               is greater than 1."]
            [@key "choices"]
            [@required]
      ; created : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) of when the chat completion was \
               created."]
            [@key "created"]
            [@required]
      ; model : string
            [@ocaml.doc "The model used for the chat completion."]
            [@key "model"]
            [@required]
      ; system_fingerprint : string option
            [@ocaml.doc
              "This fingerprint represents the backend configuration that the \
               model runs with.\n\n\
               Can be used in conjunction with the `seed` request parameter to \
               understand when backend changes have been made that might \
               impact determinism.\n"]
            [@key "system_fingerprint"]
            [@yojson.default None]
      ; object_ : string
            [@ocaml.doc "The object type, which is always `chat.completion`."]
            [@key "object"]
            [@required]
      ; usage : CompletionUsage.t option [@key "usage"] [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module CreateChatCompletionStreamResponse = struct
    type logprobs =
      { logprobs_content : ChatCompletionTokenLogprob.t list
            [@ocaml.doc
              "A list of message content tokens with log probability \
               information."]
            [@key "content"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type choices_item =
      { choices_item_delta : ChatCompletionStreamResponseDelta.t
            [@key "delta"] [@required]
      ; choices_item_logprobs : logprobs option option
            [@ocaml.doc "Log probability information for the choice."]
            [@key "logprobs"]
            [@yojson.default None]
      ; choices_item_finish_reason : string
            [@ocaml.doc
              "The reason the model stopped generating tokens. This will be \
               `stop` if the model hit a natural stop point or a provided stop \
               sequence,\n\
               `length` if the maximum number of tokens specified in the \
               request was reached,\n\
               `content_filter` if content was omitted due to a flag from our \
               content filters,\n\
               `tool_calls` if the model called a tool, or `function_call` \
               (deprecated) if the model called a function.\n"]
            [@key "finish_reason"]
            [@required]
      ; choices_item_index : int
            [@ocaml.doc "The index of the choice in the list of choices."]
            [@key "index"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { id : string
            [@ocaml.doc
              "A unique identifier for the chat completion. Each chunk has the \
               same ID."]
            [@key "id"]
            [@required]
      ; choices : choices_item list
            [@ocaml.doc
              "A list of chat completion choices. Can be more than one if `n` \
               is greater than 1."]
            [@key "choices"]
            [@required]
      ; created : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) of when the chat completion was \
               created. Each chunk has the same timestamp."]
            [@key "created"]
            [@required]
      ; model : string
            [@ocaml.doc "The model to generate the completion."]
            [@key "model"]
            [@required]
      ; system_fingerprint : string option
            [@ocaml.doc
              "This fingerprint represents the backend configuration that the \
               model runs with.\n\
               Can be used in conjunction with the `seed` request parameter to \
               understand when backend changes have been made that might \
               impact determinism.\n"]
            [@key "system_fingerprint"]
            [@yojson.default None]
      ; object_ : string
            [@ocaml.doc
              "The object type, which is always `chat.completion.chunk`."]
            [@key "object"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module CreateCompletionRequest = struct
    type logit_bias = Yojson.Safe.t [@@deriving yojson { strict = false }]

    type t =
      { model : string
            [@ocaml.doc
              "ID of the model to use. You can use the [List \
               models](/docs/api-reference/models/list) API to see all of your \
               available models, or see our [Model \
               overview](/docs/models/overview) for descriptions of them.\n"]
            [@key "model"]
            [@required]
      ; prompt : string
            [@ocaml.doc
              "The prompt(s) to generate completions for, encoded as a string, \
               array of strings, array of tokens, or array of token arrays.\n\n\
               Note that <|endoftext|> is the document separator that the \
               model sees during training, so if a prompt is not specified the \
               model will generate as if from the beginning of a new document.\n"]
            [@key "prompt"]
            [@required]
      ; best_of : int option
            [@ocaml.doc
              "Generates `best_of` completions server-side and returns the \
               \"best\" (the one with the highest log probability per token). \
               Results cannot be streamed.\n\n\
               When used with `n`, `best_of` controls the number of candidate \
               completions and `n` specifies how many to return \226\128\147 \
               `best_of` must be greater than `n`.\n\n\
               **Note:** Because this parameter generates many completions, it \
               can quickly consume your token quota. Use carefully and ensure \
               that you have reasonable settings for `max_tokens` and `stop`.\n"]
            [@key "best_of"]
            [@yojson.default None]
      ; echo : bool option
            [@ocaml.doc "Echo back the prompt in addition to the completion\n"]
            [@key "echo"]
            [@yojson.default None]
      ; frequency_penalty : float option
            [@ocaml.doc
              "Number between -2.0 and 2.0. Positive values penalize new \
               tokens based on their existing frequency in the text so far, \
               decreasing the model's likelihood to repeat the same line \
               verbatim.\n\n\
               [See more information about frequency and presence \
               penalties.](/docs/guides/text-generation/parameter-details)\n"]
            [@key "frequency_penalty"]
            [@yojson.default None]
      ; logit_bias : logit_bias option option
            [@ocaml.doc
              "Modify the likelihood of specified tokens appearing in the \
               completion.\n\n\
               Accepts a JSON object that maps tokens (specified by their \
               token ID in the GPT tokenizer) to an associated bias value from \
               -100 to 100. You can use this [tokenizer \
               tool](/tokenizer?view=bpe) to convert text to token IDs. \
               Mathematically, the bias is added to the logits generated by \
               the model prior to sampling. The exact effect will vary per \
               model, but values between -1 and 1 should decrease or increase \
               likelihood of selection; values like -100 or 100 should result \
               in a ban or exclusive selection of the relevant token.\n\n\
               As an example, you can pass `{\"50256\": -100}` to prevent the \
               <|endoftext|> token from being generated.\n"]
            [@key "logit_bias"]
            [@yojson.default None]
      ; logprobs : int option
            [@ocaml.doc
              "Include the log probabilities on the `logprobs` most likely \
               output tokens, as well the chosen tokens. For example, if \
               `logprobs` is 5, the API will return a list of the 5 most \
               likely tokens. The API will always return the `logprob` of the \
               sampled token, so there may be up to `logprobs+1` elements in \
               the response.\n\n\
               The maximum value for `logprobs` is 5.\n"]
            [@key "logprobs"]
            [@yojson.default None]
      ; max_tokens : int option
            [@ocaml.doc
              "The maximum number of [tokens](/tokenizer) that can be \
               generated in the completion.\n\n\
               The token count of your prompt plus `max_tokens` cannot exceed \
               the model's context length. [Example Python \
               code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) \
               for counting tokens.\n"]
            [@key "max_tokens"]
            [@yojson.default None]
      ; n : int option
            [@ocaml.doc
              "How many completions to generate for each prompt.\n\n\
               **Note:** Because this parameter generates many completions, it \
               can quickly consume your token quota. Use carefully and ensure \
               that you have reasonable settings for `max_tokens` and `stop`.\n"]
            [@key "n"]
            [@yojson.default None]
      ; presence_penalty : float option
            [@ocaml.doc
              "Number between -2.0 and 2.0. Positive values penalize new \
               tokens based on whether they appear in the text so far, \
               increasing the model's likelihood to talk about new topics.\n\n\
               [See more information about frequency and presence \
               penalties.](/docs/guides/text-generation/parameter-details)\n"]
            [@key "presence_penalty"]
            [@yojson.default None]
      ; seed : int option
            [@ocaml.doc
              "If specified, our system will make a best effort to sample \
               deterministically, such that repeated requests with the same \
               `seed` and parameters should return the same result.\n\n\
               Determinism is not guaranteed, and you should refer to the \
               `system_fingerprint` response parameter to monitor changes in \
               the backend.\n"]
            [@key "seed"]
            [@yojson.default None]
      ; stop : string option
            [@ocaml.doc
              "Up to 4 sequences where the API will stop generating further \
               tokens. The returned text will not contain the stop sequence.\n"]
            [@key "stop"]
            [@yojson.default None]
      ; stream : bool option
            [@ocaml.doc
              "Whether to stream back partial progress. If set, tokens will be \
               sent as data-only [server-sent \
               events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) \
               as they become available, with the stream terminated by a \
               `data: [DONE]` message. [Example Python \
               code](https://cookbook.openai.com/examples/how_to_stream_completions).\n"]
            [@key "stream"]
            [@yojson.default None]
      ; suffix : string option
            [@ocaml.doc
              "The suffix that comes after a completion of inserted text."]
            [@key "suffix"]
            [@yojson.default None]
      ; temperature : float option
            [@ocaml.doc
              "What sampling temperature to use, between 0 and 2. Higher \
               values like 0.8 will make the output more random, while lower \
               values like 0.2 will make it more focused and deterministic.\n\n\
               We generally recommend altering this or `top_p` but not both.\n"]
            [@key "temperature"]
            [@yojson.default None]
      ; top_p : float option
            [@ocaml.doc
              "An alternative to sampling with temperature, called nucleus \
               sampling, where the model considers the results of the tokens \
               with top_p probability mass. So 0.1 means only the tokens \
               comprising the top 10% probability mass are considered.\n\n\
               We generally recommend altering this or `temperature` but not \
               both.\n"]
            [@key "top_p"]
            [@yojson.default None]
      ; user : string option
            [@ocaml.doc
              "A unique identifier representing your end-user, which can help \
               OpenAI to monitor and detect abuse. [Learn \
               more](/docs/guides/safety-best-practices/end-user-ids).\n"]
            [@key "user"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module CreateCompletionResponse = struct
    type top_logprobs_item = Yojson.Safe.t
    [@@deriving yojson { strict = false }]

    type logprobs =
      { logprobs_text_offset : int list option
            [@key "text_offset"] [@yojson.default None]
      ; logprobs_token_logprobs : float list option
            [@key "token_logprobs"] [@yojson.default None]
      ; logprobs_tokens : string list option
            [@key "tokens"] [@yojson.default None]
      ; logprobs_top_logprobs : top_logprobs_item list option
            [@key "top_logprobs"] [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]

    type choices_item =
      { choices_item_finish_reason : string
            [@ocaml.doc
              "The reason the model stopped generating tokens. This will be \
               `stop` if the model hit a natural stop point or a provided stop \
               sequence,\n\
               `length` if the maximum number of tokens specified in the \
               request was reached,\n\
               or `content_filter` if content was omitted due to a flag from \
               our content filters.\n"]
            [@key "finish_reason"]
            [@required]
      ; choices_item_index : int [@key "index"] [@required]
      ; choices_item_logprobs : logprobs option [@key "logprobs"] [@required]
      ; choices_item_text : string [@key "text"] [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { id : string
            [@ocaml.doc "A unique identifier for the completion."]
            [@key "id"]
            [@required]
      ; choices : choices_item list
            [@ocaml.doc
              "The list of completion choices the model generated for the \
               input prompt."]
            [@key "choices"]
            [@required]
      ; created : int
            [@ocaml.doc
              "The Unix timestamp (in seconds) of when the completion was \
               created."]
            [@key "created"]
            [@required]
      ; model : string
            [@ocaml.doc "The model used for completion."]
            [@key "model"]
            [@required]
      ; system_fingerprint : string option
            [@ocaml.doc
              "This fingerprint represents the backend configuration that the \
               model runs with.\n\n\
               Can be used in conjunction with the `seed` request parameter to \
               understand when backend changes have been made that might \
               impact determinism.\n"]
            [@key "system_fingerprint"]
            [@yojson.default None]
      ; object_ : string
            [@ocaml.doc "The object type, which is always \"text_completion\""]
            [@key "object"]
            [@required]
      ; usage : CompletionUsage.t option [@key "usage"] [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module CreateEmbeddingRequest = struct
    type t =
      { input : string
            [@ocaml.doc
              "Input text to embed, encoded as a string or array of tokens. To \
               embed multiple inputs in a single request, pass an array of \
               strings or array of token arrays. The input must not exceed the \
               max input tokens for the model (8192 tokens for \
               `text-embedding-ada-002`), cannot be an empty string, and any \
               array must be 2048 dimensions or less. [Example Python \
               code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) \
               for counting tokens.\n"]
            [@key "input"]
            [@required]
      ; model : string
            [@ocaml.doc
              "ID of the model to use. You can use the [List \
               models](/docs/api-reference/models/list) API to see all of your \
               available models, or see our [Model \
               overview](/docs/models/overview) for descriptions of them.\n"]
            [@key "model"]
            [@required]
      ; encoding_format : string option
            [@ocaml.doc
              "The format to return the embeddings in. Can be either `float` \
               or [`base64`](https://pypi.org/project/pybase64/)."]
            [@key "encoding_format"]
            [@yojson.default None]
      ; user : string option
            [@ocaml.doc
              "A unique identifier representing your end-user, which can help \
               OpenAI to monitor and detect abuse. [Learn \
               more](/docs/guides/safety-best-practices/end-user-ids).\n"]
            [@key "user"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module CreateEmbeddingResponse = struct
    type usage =
      { usage_prompt_tokens : int
            [@ocaml.doc "The number of tokens used by the prompt."]
            [@key "prompt_tokens"]
            [@required]
      ; usage_total_tokens : int
            [@ocaml.doc "The total number of tokens used by the request."]
            [@key "total_tokens"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { data : Embedding.t list
            [@ocaml.doc "The list of embeddings generated by the model."]
            [@key "data"]
            [@required]
      ; model : string
            [@ocaml.doc "The name of the model used to generate the embedding."]
            [@key "model"]
            [@required]
      ; object_ : string
            [@ocaml.doc "The object type, which is always \"list\"."]
            [@key "object"]
            [@required]
      ; usage : usage
            [@ocaml.doc "The usage information for the request."]
            [@key "usage"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module CreateFileRequest = struct
    type t =
      { file : [ `File of string ]
            [@ocaml.doc "The File object (not file name) to be uploaded.\n"]
            [@key "file"]
            [@required]
      ; purpose : string
            [@ocaml.doc
              "The intended purpose of the uploaded file.\n\n\
               Use \"fine-tune\" for \
               [Fine-tuning](/docs/api-reference/fine-tuning) and \
               \"assistants\" for [Assistants](/docs/api-reference/assistants) \
               and [Messages](/docs/api-reference/messages). This allows us to \
               validate the format of the uploaded file is correct for \
               fine-tuning.\n"]
            [@key "purpose"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    let to_multipart :
        t -> (string * [> `String of string | `File of string ]) list =
     fun t ->
      List.filter_map
        (fun x -> Fun.id x)
        [ (match Some t.file with
          | None -> None
          | Some v -> Some ("file", `File (string_of_file v)))
        ; (match Some t.purpose with
          | None -> None
          | Some v -> Some ("purpose", `String v))
        ]
  end

  module CreateFineTuningJobRequest = struct
    type hyperparameters =
      { hyperparameters_batch_size : string option
            [@ocaml.doc
              "Number of examples in each batch. A larger batch size means \
               that model parameters\n\
               are updated less frequently, but with lower variance.\n"]
            [@key "batch_size"]
            [@yojson.default None]
      ; hyperparameters_learning_rate_multiplier : string option
            [@ocaml.doc
              "Scaling factor for the learning rate. A smaller learning rate \
               may be useful to avoid\n\
               overfitting.\n"]
            [@key "learning_rate_multiplier"]
            [@yojson.default None]
      ; hyperparameters_n_epochs : string option
            [@ocaml.doc
              "The number of epochs to train the model for. An epoch refers to \
               one full cycle\n\
               through the training dataset.\n"]
            [@key "n_epochs"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { model : string
            [@ocaml.doc
              "The name of the model to fine-tune. You can select one of the\n\
               [supported \
               models](/docs/guides/fine-tuning/what-models-can-be-fine-tuned).\n"]
            [@key "model"]
            [@required]
      ; training_file : string
            [@ocaml.doc
              "The ID of an uploaded file that contains training data.\n\n\
               See [upload file](/docs/api-reference/files/upload) for how to \
               upload a file.\n\n\
               Your dataset must be formatted as a JSONL file. Additionally, \
               you must upload your file with the purpose `fine-tune`.\n\n\
               See the [fine-tuning guide](/docs/guides/fine-tuning) for more \
               details.\n"]
            [@key "training_file"]
            [@required]
      ; hyperparameters : hyperparameters option
            [@ocaml.doc "The hyperparameters used for the fine-tuning job."]
            [@key "hyperparameters"]
            [@yojson.default None]
      ; suffix : string option
            [@ocaml.doc
              "A string of up to 18 characters that will be added to your \
               fine-tuned model name.\n\n\
               For example, a `suffix` of \"custom-model-name\" would produce \
               a model name like \
               `ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`.\n"]
            [@key "suffix"]
            [@yojson.default None]
      ; validation_file : string option
            [@ocaml.doc
              "The ID of an uploaded file that contains validation data.\n\n\
               If you provide this file, the data is used to generate validation\n\
               metrics periodically during fine-tuning. These metrics can be \
               viewed in\n\
               the fine-tuning results file.\n\
               The same data should not be present in both train and \
               validation files.\n\n\
               Your dataset must be formatted as a JSONL file. You must upload \
               your file with the purpose `fine-tune`.\n\n\
               See the [fine-tuning guide](/docs/guides/fine-tuning) for more \
               details.\n"]
            [@key "validation_file"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module CreateImageEditRequest = struct
    type t =
      { image : [ `File of string ]
            [@ocaml.doc
              "The image to edit. Must be a valid PNG file, less than 4MB, and \
               square. If mask is not provided, image must have transparency, \
               which will be used as the mask."]
            [@key "image"]
            [@required]
      ; prompt : string
            [@ocaml.doc
              "A text description of the desired image(s). The maximum length \
               is 1000 characters."]
            [@key "prompt"]
            [@required]
      ; mask : [ `File of string ] option
            [@ocaml.doc
              "An additional image whose fully transparent areas (e.g. where \
               alpha is zero) indicate where `image` should be edited. Must be \
               a valid PNG file, less than 4MB, and have the same dimensions \
               as `image`."]
            [@key "mask"]
            [@yojson.default None]
      ; model : string option
            [@ocaml.doc
              "The model to use for image generation. Only `dall-e-2` is \
               supported at this time."]
            [@key "model"]
            [@yojson.default None]
      ; n : int option
            [@ocaml.doc
              "The number of images to generate. Must be between 1 and 10."]
            [@key "n"]
            [@yojson.default None]
      ; size : string option
            [@ocaml.doc
              "The size of the generated images. Must be one of `256x256`, \
               `512x512`, or `1024x1024`."]
            [@key "size"]
            [@yojson.default None]
      ; response_format : string option
            [@ocaml.doc
              "The format in which the generated images are returned. Must be \
               one of `url` or `b64_json`."]
            [@key "response_format"]
            [@yojson.default None]
      ; user : string option
            [@ocaml.doc
              "A unique identifier representing your end-user, which can help \
               OpenAI to monitor and detect abuse. [Learn \
               more](/docs/guides/safety-best-practices/end-user-ids).\n"]
            [@key "user"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]

    let to_multipart :
        t -> (string * [> `String of string | `File of string ]) list =
     fun t ->
      List.filter_map
        (fun x -> Fun.id x)
        [ (match Some t.image with
          | None -> None
          | Some v -> Some ("image", `File (string_of_file v)))
        ; (match Some t.prompt with
          | None -> None
          | Some v -> Some ("prompt", `String v))
        ; (match t.mask with
          | None -> None
          | Some v -> Some ("mask", `File (string_of_file v)))
        ; (match t.model with
          | None -> None
          | Some v -> Some ("model", `String v))
        ; (match t.n with
          | None -> None
          | Some v -> Some ("n", `String (string_of_int v)))
        ; (match t.size with
          | None -> None
          | Some v -> Some ("size", `String v))
        ; (match t.response_format with
          | None -> None
          | Some v -> Some ("response_format", `String v))
        ; (match t.user with
          | None -> None
          | Some v -> Some ("user", `String v))
        ]
  end

  module CreateImageRequest = struct
    type t =
      { prompt : string
            [@ocaml.doc
              "A text description of the desired image(s). The maximum length \
               is 1000 characters for `dall-e-2` and 4000 characters for \
               `dall-e-3`."]
            [@key "prompt"]
            [@required]
      ; model : string option
            [@ocaml.doc "The model to use for image generation."]
            [@key "model"]
            [@yojson.default None]
      ; n : int option
            [@ocaml.doc
              "The number of images to generate. Must be between 1 and 10. For \
               `dall-e-3`, only `n=1` is supported."]
            [@key "n"]
            [@yojson.default None]
      ; quality : string option
            [@ocaml.doc
              "The quality of the image that will be generated. `hd` creates \
               images with finer details and greater consistency across the \
               image. This param is only supported for `dall-e-3`."]
            [@key "quality"]
            [@yojson.default None]
      ; response_format : string option
            [@ocaml.doc
              "The format in which the generated images are returned. Must be \
               one of `url` or `b64_json`."]
            [@key "response_format"]
            [@yojson.default None]
      ; size : string option
            [@ocaml.doc
              "The size of the generated images. Must be one of `256x256`, \
               `512x512`, or `1024x1024` for `dall-e-2`. Must be one of \
               `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models."]
            [@key "size"]
            [@yojson.default None]
      ; style : string option
            [@ocaml.doc
              "The style of the generated images. Must be one of `vivid` or \
               `natural`. Vivid causes the model to lean towards generating \
               hyper-real and dramatic images. Natural causes the model to \
               produce more natural, less hyper-real looking images. This \
               param is only supported for `dall-e-3`."]
            [@key "style"]
            [@yojson.default None]
      ; user : string option
            [@ocaml.doc
              "A unique identifier representing your end-user, which can help \
               OpenAI to monitor and detect abuse. [Learn \
               more](/docs/guides/safety-best-practices/end-user-ids).\n"]
            [@key "user"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module CreateImageVariationRequest = struct
    type t =
      { image : [ `File of string ]
            [@ocaml.doc
              "The image to use as the basis for the variation(s). Must be a \
               valid PNG file, less than 4MB, and square."]
            [@key "image"]
            [@required]
      ; model : string option
            [@ocaml.doc
              "The model to use for image generation. Only `dall-e-2` is \
               supported at this time."]
            [@key "model"]
            [@yojson.default None]
      ; n : int option
            [@ocaml.doc
              "The number of images to generate. Must be between 1 and 10. For \
               `dall-e-3`, only `n=1` is supported."]
            [@key "n"]
            [@yojson.default None]
      ; response_format : string option
            [@ocaml.doc
              "The format in which the generated images are returned. Must be \
               one of `url` or `b64_json`."]
            [@key "response_format"]
            [@yojson.default None]
      ; size : string option
            [@ocaml.doc
              "The size of the generated images. Must be one of `256x256`, \
               `512x512`, or `1024x1024`."]
            [@key "size"]
            [@yojson.default None]
      ; user : string option
            [@ocaml.doc
              "A unique identifier representing your end-user, which can help \
               OpenAI to monitor and detect abuse. [Learn \
               more](/docs/guides/safety-best-practices/end-user-ids).\n"]
            [@key "user"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]

    let to_multipart :
        t -> (string * [> `String of string | `File of string ]) list =
     fun t ->
      List.filter_map
        (fun x -> Fun.id x)
        [ (match Some t.image with
          | None -> None
          | Some v -> Some ("image", `File (string_of_file v)))
        ; (match t.model with
          | None -> None
          | Some v -> Some ("model", `String v))
        ; (match t.n with
          | None -> None
          | Some v -> Some ("n", `String (string_of_int v)))
        ; (match t.response_format with
          | None -> None
          | Some v -> Some ("response_format", `String v))
        ; (match t.size with
          | None -> None
          | Some v -> Some ("size", `String v))
        ; (match t.user with
          | None -> None
          | Some v -> Some ("user", `String v))
        ]
  end

  module CreateModerationRequest = struct
    type t =
      { input : string
            [@ocaml.doc "The input text to classify"] [@key "input"] [@required]
      ; model : string option
            [@ocaml.doc
              "Two content moderations models are available: \
               `text-moderation-stable` and `text-moderation-latest`.\n\n\
               The default is `text-moderation-latest` which will be \
               automatically upgraded over time. This ensures you are always \
               using our most accurate model. If you use \
               `text-moderation-stable`, we will provide advanced notice \
               before updating the model. Accuracy of `text-moderation-stable` \
               may be slightly lower than for `text-moderation-latest`.\n"]
            [@key "model"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module CreateModerationResponse = struct
    type categories =
      { categories_hate : bool
            [@ocaml.doc
              "Content that expresses, incites, or promotes hate based on \
               race, gender, ethnicity, religion, nationality, sexual \
               orientation, disability status, or caste. Hateful content aimed \
               at non-protected groups (e.g., chess players) is harassment."]
            [@key "hate"]
            [@required]
      ; categories_hate_threatening : bool
            [@ocaml.doc
              "Hateful content that also includes violence or serious harm \
               towards the targeted group based on race, gender, ethnicity, \
               religion, nationality, sexual orientation, disability status, \
               or caste."]
            [@key "hate/threatening"]
            [@required]
      ; categories_harassment : bool
            [@ocaml.doc
              "Content that expresses, incites, or promotes harassing language \
               towards any target."]
            [@key "harassment"]
            [@required]
      ; categories_harassment_threatening : bool
            [@ocaml.doc
              "Harassment content that also includes violence or serious harm \
               towards any target."]
            [@key "harassment/threatening"]
            [@required]
      ; categories_self_harm : bool
            [@ocaml.doc
              "Content that promotes, encourages, or depicts acts of \
               self-harm, such as suicide, cutting, and eating disorders."]
            [@key "self-harm"]
            [@required]
      ; categories_self_harm_intent : bool
            [@ocaml.doc
              "Content where the speaker expresses that they are engaging or \
               intend to engage in acts of self-harm, such as suicide, \
               cutting, and eating disorders."]
            [@key "self-harm/intent"]
            [@required]
      ; categories_self_harm_instructions : bool
            [@ocaml.doc
              "Content that encourages performing acts of self-harm, such as \
               suicide, cutting, and eating disorders, or that gives \
               instructions or advice on how to commit such acts."]
            [@key "self-harm/instructions"]
            [@required]
      ; categories_sexual : bool
            [@ocaml.doc
              "Content meant to arouse sexual excitement, such as the \
               description of sexual activity, or that promotes sexual \
               services (excluding sex education and wellness)."]
            [@key "sexual"]
            [@required]
      ; categories_sexual_minors : bool
            [@ocaml.doc
              "Sexual content that includes an individual who is under 18 \
               years old."]
            [@key "sexual/minors"]
            [@required]
      ; categories_violence : bool
            [@ocaml.doc
              "Content that depicts death, violence, or physical injury."]
            [@key "violence"]
            [@required]
      ; categories_violence_graphic : bool
            [@ocaml.doc
              "Content that depicts death, violence, or physical injury in \
               graphic detail."]
            [@key "violence/graphic"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type category_scores =
      { category_scores_hate : float
            [@ocaml.doc "The score for the category 'hate'."]
            [@key "hate"]
            [@required]
      ; category_scores_hate_threatening : float
            [@ocaml.doc "The score for the category 'hate/threatening'."]
            [@key "hate/threatening"]
            [@required]
      ; category_scores_harassment : float
            [@ocaml.doc "The score for the category 'harassment'."]
            [@key "harassment"]
            [@required]
      ; category_scores_harassment_threatening : float
            [@ocaml.doc "The score for the category 'harassment/threatening'."]
            [@key "harassment/threatening"]
            [@required]
      ; category_scores_self_harm : float
            [@ocaml.doc "The score for the category 'self-harm'."]
            [@key "self-harm"]
            [@required]
      ; category_scores_self_harm_intent : float
            [@ocaml.doc "The score for the category 'self-harm/intent'."]
            [@key "self-harm/intent"]
            [@required]
      ; category_scores_self_harm_instructions : float
            [@ocaml.doc "The score for the category 'self-harm/instructions'."]
            [@key "self-harm/instructions"]
            [@required]
      ; category_scores_sexual : float
            [@ocaml.doc "The score for the category 'sexual'."]
            [@key "sexual"]
            [@required]
      ; category_scores_sexual_minors : float
            [@ocaml.doc "The score for the category 'sexual/minors'."]
            [@key "sexual/minors"]
            [@required]
      ; category_scores_violence : float
            [@ocaml.doc "The score for the category 'violence'."]
            [@key "violence"]
            [@required]
      ; category_scores_violence_graphic : float
            [@ocaml.doc "The score for the category 'violence/graphic'."]
            [@key "violence/graphic"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type results_item =
      { results_item_flagged : bool
            [@ocaml.doc
              "Whether the content violates [OpenAI's usage \
               policies](/policies/usage-policies)."]
            [@key "flagged"]
            [@required]
      ; results_item_categories : categories
            [@ocaml.doc
              "A list of the categories, and whether they are flagged or not."]
            [@key "categories"]
            [@required]
      ; results_item_category_scores : category_scores
            [@ocaml.doc
              "A list of the categories along with their scores as predicted \
               by model."]
            [@key "category_scores"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { id : string
            [@ocaml.doc "The unique identifier for the moderation request."]
            [@key "id"]
            [@required]
      ; model : string
            [@ocaml.doc "The model used to generate the moderation results."]
            [@key "model"]
            [@required]
      ; results : results_item list
            [@ocaml.doc "A list of moderation objects."]
            [@key "results"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module CreateRunRequest = struct
    type metadata = Yojson.Safe.t [@@deriving yojson { strict = false }]

    type t =
      { assistant_id : string
            [@ocaml.doc
              "The ID of the [assistant](/docs/api-reference/assistants) to \
               use to execute this run."]
            [@key "assistant_id"]
            [@required]
      ; model : string option
            [@ocaml.doc
              "The ID of the [Model](/docs/api-reference/models) to be used to \
               execute this run. If a value is provided here, it will override \
               the model associated with the assistant. If not, the model \
               associated with the assistant will be used."]
            [@key "model"]
            [@yojson.default None]
      ; instructions : string option
            [@ocaml.doc
              "Overrides the \
               [instructions](/docs/api-reference/assistants/createAssistant) \
               of the assistant. This is useful for modifying the behavior on \
               a per-run basis."]
            [@key "instructions"]
            [@yojson.default None]
      ; additional_instructions : string option
            [@ocaml.doc
              "Appends additional instructions at the end of the instructions \
               for the run. This is useful for modifying the behavior on a \
               per-run basis without overriding other instructions."]
            [@key "additional_instructions"]
            [@yojson.default None]
      ; tools : AssistantToolsCode.t list option
            [@ocaml.doc
              "Override the tools the assistant can use for this run. This is \
               useful for modifying the behavior on a per-run basis."]
            [@key "tools"]
            [@yojson.default None]
      ; metadata : metadata option option
            [@ocaml.doc
              "Set of 16 key-value pairs that can be attached to an object. \
               This can be useful for storing additional information about the \
               object in a structured format. Keys can be a maximum of 64 \
               characters long and values can be a maxium of 512 characters \
               long.\n"]
            [@key "metadata"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module CreateSpeechRequest = struct
    type t =
      { model : string
            [@ocaml.doc
              "One of the available [TTS models](/docs/models/tts): `tts-1` or \
               `tts-1-hd`\n"]
            [@key "model"]
            [@required]
      ; input : string
            [@ocaml.doc
              "The text to generate audio for. The maximum length is 4096 \
               characters."]
            [@key "input"]
            [@required]
      ; voice : string
            [@ocaml.doc
              "The voice to use when generating the audio. Supported voices \
               are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. \
               Previews of the voices are available in the [Text to speech \
               guide](/docs/guides/text-to-speech/voice-options)."]
            [@key "voice"]
            [@required]
      ; response_format : string option
            [@ocaml.doc
              "The format to audio in. Supported formats are `mp3`, `opus`, \
               `aac`, and `flac`."]
            [@key "response_format"]
            [@yojson.default None]
      ; speed : float option
            [@ocaml.doc
              "The speed of the generated audio. Select a value from `0.25` to \
               `4.0`. `1.0` is the default."]
            [@key "speed"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module CreateThreadAndRunRequest = struct
    type metadata = Yojson.Safe.t [@@deriving yojson { strict = false }]

    type t =
      { assistant_id : string
            [@ocaml.doc
              "The ID of the [assistant](/docs/api-reference/assistants) to \
               use to execute this run."]
            [@key "assistant_id"]
            [@required]
      ; thread : CreateThreadRequest.t option
            [@ocaml.doc
              "If no thread is provided, an empty thread will be created."]
            [@key "thread"]
            [@yojson.default None]
      ; model : string option
            [@ocaml.doc
              "The ID of the [Model](/docs/api-reference/models) to be used to \
               execute this run. If a value is provided here, it will override \
               the model associated with the assistant. If not, the model \
               associated with the assistant will be used."]
            [@key "model"]
            [@yojson.default None]
      ; instructions : string option
            [@ocaml.doc
              "Override the default system message of the assistant. This is \
               useful for modifying the behavior on a per-run basis."]
            [@key "instructions"]
            [@yojson.default None]
      ; tools : AssistantToolsCode.t list option
            [@ocaml.doc
              "Override the tools the assistant can use for this run. This is \
               useful for modifying the behavior on a per-run basis."]
            [@key "tools"]
            [@yojson.default None]
      ; metadata : metadata option option
            [@ocaml.doc
              "Set of 16 key-value pairs that can be attached to an object. \
               This can be useful for storing additional information about the \
               object in a structured format. Keys can be a maximum of 64 \
               characters long and values can be a maxium of 512 characters \
               long.\n"]
            [@key "metadata"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module CreateTranscriptionRequest = struct
    type t =
      { file : [ `File of string ]
            [@ocaml.doc
              "The audio file object (not file name) to transcribe, in one of \
               these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or \
               webm.\n"]
            [@key "file"]
            [@required]
      ; model : string
            [@ocaml.doc
              "ID of the model to use. Only `whisper-1` is currently available.\n"]
            [@key "model"]
            [@required]
      ; language : string option
            [@ocaml.doc
              "The language of the input audio. Supplying the input language \
               in \
               [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) \
               format will improve accuracy and latency.\n"]
            [@key "language"]
            [@yojson.default None]
      ; prompt : string option
            [@ocaml.doc
              "An optional text to guide the model's style or continue a \
               previous audio segment. The \
               [prompt](/docs/guides/speech-to-text/prompting) should match \
               the audio language.\n"]
            [@key "prompt"]
            [@yojson.default None]
      ; response_format : string option
            [@ocaml.doc
              "The format of the transcript output, in one of these options: \
               `json`, `text`, `srt`, `verbose_json`, or `vtt`.\n"]
            [@key "response_format"]
            [@yojson.default None]
      ; temperature : float option
            [@ocaml.doc
              "The sampling temperature, between 0 and 1. Higher values like \
               0.8 will make the output more random, while lower values like \
               0.2 will make it more focused and deterministic. If set to 0, \
               the model will use [log \
               probability](https://en.wikipedia.org/wiki/Log_probability) to \
               automatically increase the temperature until certain thresholds \
               are hit.\n"]
            [@key "temperature"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]

    let to_multipart :
        t -> (string * [> `String of string | `File of string ]) list =
     fun t ->
      List.filter_map
        (fun x -> Fun.id x)
        [ (match Some t.file with
          | None -> None
          | Some v -> Some ("file", `File (string_of_file v)))
        ; (match Some t.model with
          | None -> None
          | Some v -> Some ("model", `String v))
        ; (match t.language with
          | None -> None
          | Some v -> Some ("language", `String v))
        ; (match t.prompt with
          | None -> None
          | Some v -> Some ("prompt", `String v))
        ; (match t.response_format with
          | None -> None
          | Some v -> Some ("response_format", `String v))
        ; (match t.temperature with
          | None -> None
          | Some v -> Some ("temperature", `String (string_of_float v)))
        ]
  end

  module CreateTranscriptionResponse = struct
    type t = { text : string [@key "text"] [@required] }
    [@@deriving make, yojson { strict = false }]
  end

  module CreateTranslationRequest = struct
    type t =
      { file : [ `File of string ]
            [@ocaml.doc
              "The audio file object (not file name) translate, in one of \
               these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or \
               webm.\n"]
            [@key "file"]
            [@required]
      ; model : string
            [@ocaml.doc
              "ID of the model to use. Only `whisper-1` is currently available.\n"]
            [@key "model"]
            [@required]
      ; prompt : string option
            [@ocaml.doc
              "An optional text to guide the model's style or continue a \
               previous audio segment. The \
               [prompt](/docs/guides/speech-to-text/prompting) should be in \
               English.\n"]
            [@key "prompt"]
            [@yojson.default None]
      ; response_format : string option
            [@ocaml.doc
              "The format of the transcript output, in one of these options: \
               `json`, `text`, `srt`, `verbose_json`, or `vtt`.\n"]
            [@key "response_format"]
            [@yojson.default None]
      ; temperature : float option
            [@ocaml.doc
              "The sampling temperature, between 0 and 1. Higher values like \
               0.8 will make the output more random, while lower values like \
               0.2 will make it more focused and deterministic. If set to 0, \
               the model will use [log \
               probability](https://en.wikipedia.org/wiki/Log_probability) to \
               automatically increase the temperature until certain thresholds \
               are hit.\n"]
            [@key "temperature"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]

    let to_multipart :
        t -> (string * [> `String of string | `File of string ]) list =
     fun t ->
      List.filter_map
        (fun x -> Fun.id x)
        [ (match Some t.file with
          | None -> None
          | Some v -> Some ("file", `File (string_of_file v)))
        ; (match Some t.model with
          | None -> None
          | Some v -> Some ("model", `String v))
        ; (match t.prompt with
          | None -> None
          | Some v -> Some ("prompt", `String v))
        ; (match t.response_format with
          | None -> None
          | Some v -> Some ("response_format", `String v))
        ; (match t.temperature with
          | None -> None
          | Some v -> Some ("temperature", `String (string_of_float v)))
        ]
  end

  module CreateTranslationResponse = struct
    type t = { text : string [@key "text"] [@required] }
    [@@deriving make, yojson { strict = false }]
  end

  module DeleteAssistantFileResponse = struct
    type t =
      { id : string [@key "id"] [@required]
      ; deleted : bool [@key "deleted"] [@required]
      ; object_ : string [@key "object"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module DeleteAssistantResponse = struct
    type t =
      { id : string [@key "id"] [@required]
      ; deleted : bool [@key "deleted"] [@required]
      ; object_ : string [@key "object"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module DeleteFileResponse = struct
    type t =
      { id : string [@key "id"] [@required]
      ; object_ : string [@key "object"] [@required]
      ; deleted : bool [@key "deleted"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module DeleteMessageResponse = struct
    type t =
      { id : string [@key "id"] [@required]
      ; deleted : bool [@key "deleted"] [@required]
      ; object_ : string [@key "object"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module DeleteModelResponse = struct
    type t =
      { id : string [@key "id"] [@required]
      ; deleted : bool [@key "deleted"] [@required]
      ; object_ : string [@key "object"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module DeleteThreadResponse = struct
    type t =
      { id : string [@key "id"] [@required]
      ; deleted : bool [@key "deleted"] [@required]
      ; object_ : string [@key "object"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ErrorResponse = struct
    type t = { error : Error.t [@key "error"] [@required] }
    [@@deriving make, yojson { strict = false }]
  end

  module ImagesResponse = struct
    type t =
      { created : int [@key "created"] [@required]
      ; data : Image.t list [@key "data"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ListAssistantFilesResponse = struct
    type t =
      { object_ : string [@key "object"] [@required]
      ; data : AssistantFileObject.t list [@key "data"] [@required]
      ; first_id : string [@key "first_id"] [@required]
      ; last_id : string [@key "last_id"] [@required]
      ; has_more : bool [@key "has_more"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ListAssistantsResponse = struct
    type t =
      { object_ : string [@key "object"] [@required]
      ; data : AssistantObject.t list [@key "data"] [@required]
      ; first_id : string [@key "first_id"] [@required]
      ; last_id : string [@key "last_id"] [@required]
      ; has_more : bool [@key "has_more"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ListFilesResponse = struct
    type t =
      { data : OpenAIFile.t list [@key "data"] [@required]
      ; object_ : string [@key "object"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ListFineTuningJobEventsResponse = struct
    type t =
      { data : FineTuningJobEvent.t list [@key "data"] [@required]
      ; object_ : string [@key "object"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ListMessageFilesResponse = struct
    type t =
      { object_ : string [@key "object"] [@required]
      ; data : MessageFileObject.t list [@key "data"] [@required]
      ; first_id : string [@key "first_id"] [@required]
      ; last_id : string [@key "last_id"] [@required]
      ; has_more : bool [@key "has_more"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ListMessagesResponse = struct
    type t =
      { object_ : string [@key "object"] [@required]
      ; data : MessageObject.t list [@key "data"] [@required]
      ; first_id : string [@key "first_id"] [@required]
      ; last_id : string [@key "last_id"] [@required]
      ; has_more : bool [@key "has_more"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ListModelsResponse = struct
    type t =
      { object_ : string [@key "object"] [@required]
      ; data : Model.t list [@key "data"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ListPaginatedFineTuningJobsResponse = struct
    type t =
      { data : FineTuningJob.t list [@key "data"] [@required]
      ; has_more : bool [@key "has_more"] [@required]
      ; object_ : string [@key "object"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ListRunStepsResponse = struct
    type t =
      { object_ : string [@key "object"] [@required]
      ; data : RunStepObject.t list [@key "data"] [@required]
      ; first_id : string [@key "first_id"] [@required]
      ; last_id : string [@key "last_id"] [@required]
      ; has_more : bool [@key "has_more"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ListRunsResponse = struct
    type t =
      { object_ : string [@key "object"] [@required]
      ; data : RunObject.t list [@key "data"] [@required]
      ; first_id : string [@key "first_id"] [@required]
      ; last_id : string [@key "last_id"] [@required]
      ; has_more : bool [@key "has_more"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ListThreadsResponse = struct
    type t =
      { object_ : string [@key "object"] [@required]
      ; data : ThreadObject.t list [@key "data"] [@required]
      ; first_id : string [@key "first_id"] [@required]
      ; last_id : string [@key "last_id"] [@required]
      ; has_more : bool [@key "has_more"] [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ModifyAssistantRequest = struct
    type metadata = Yojson.Safe.t [@@deriving yojson { strict = false }]

    type t =
      { model : string option
            [@ocaml.doc
              "ID of the model to use. You can use the [List \
               models](/docs/api-reference/models/list) API to see all of your \
               available models, or see our [Model \
               overview](/docs/models/overview) for descriptions of them.\n"]
            [@key "model"]
            [@yojson.default None]
      ; name : string option
            [@ocaml.doc
              "The name of the assistant. The maximum length is 256 characters.\n"]
            [@key "name"]
            [@yojson.default None]
      ; description : string option
            [@ocaml.doc
              "The description of the assistant. The maximum length is 512 \
               characters.\n"]
            [@key "description"]
            [@yojson.default None]
      ; instructions : string option
            [@ocaml.doc
              "The system instructions that the assistant uses. The maximum \
               length is 32768 characters.\n"]
            [@key "instructions"]
            [@yojson.default None]
      ; tools : AssistantToolsCode.t list option
            [@ocaml.doc
              "A list of tool enabled on the assistant. There can be a maximum \
               of 128 tools per assistant. Tools can be of types \
               `code_interpreter`, `retrieval`, or `function`.\n"]
            [@key "tools"]
            [@yojson.default None]
      ; file_ids : string list option
            [@ocaml.doc
              "A list of [File](/docs/api-reference/files) IDs attached to \
               this assistant. There can be a maximum of 20 files attached to \
               the assistant. Files are ordered by their creation date in \
               ascending order. If a file was previously attached to the list \
               but does not show up in the list, it will be deleted from the \
               assistant.\n"]
            [@key "file_ids"]
            [@yojson.default None]
      ; metadata : metadata option option
            [@ocaml.doc
              "Set of 16 key-value pairs that can be attached to an object. \
               This can be useful for storing additional information about the \
               object in a structured format. Keys can be a maximum of 64 \
               characters long and values can be a maxium of 512 characters \
               long.\n"]
            [@key "metadata"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ModifyMessageRequest = struct
    type metadata = Yojson.Safe.t [@@deriving yojson { strict = false }]

    type t =
      { metadata : metadata option option
            [@ocaml.doc
              "Set of 16 key-value pairs that can be attached to an object. \
               This can be useful for storing additional information about the \
               object in a structured format. Keys can be a maximum of 64 \
               characters long and values can be a maxium of 512 characters \
               long.\n"]
            [@key "metadata"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ModifyRunRequest = struct
    type metadata = Yojson.Safe.t [@@deriving yojson { strict = false }]

    type t =
      { metadata : metadata option option
            [@ocaml.doc
              "Set of 16 key-value pairs that can be attached to an object. \
               This can be useful for storing additional information about the \
               object in a structured format. Keys can be a maximum of 64 \
               characters long and values can be a maxium of 512 characters \
               long.\n"]
            [@key "metadata"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module ModifyThreadRequest = struct
    type metadata = Yojson.Safe.t [@@deriving yojson { strict = false }]

    type t =
      { metadata : metadata option option
            [@ocaml.doc
              "Set of 16 key-value pairs that can be attached to an object. \
               This can be useful for storing additional information about the \
               object in a structured format. Keys can be a maximum of 64 \
               characters long and values can be a maxium of 512 characters \
               long.\n"]
            [@key "metadata"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module SubmitToolOutputsRunRequest = struct
    type tool_outputs_item =
      { tool_outputs_item_tool_call_id : string option
            [@ocaml.doc
              "The ID of the tool call in the `required_action` object within \
               the run object the output is being submitted for."]
            [@key "tool_call_id"]
            [@yojson.default None]
      ; tool_outputs_item_output : string option
            [@ocaml.doc
              "The output of the tool call to be submitted to continue the run."]
            [@key "output"]
            [@yojson.default None]
      }
    [@@deriving make, yojson { strict = false }]

    type t =
      { tool_outputs : tool_outputs_item list
            [@ocaml.doc
              "A list of tools for which the outputs are being submitted."]
            [@key "tool_outputs"]
            [@required]
      }
    [@@deriving make, yojson { strict = false }]
  end

  module CreateSpeechResponse = struct
    type t = [ `File of string ] [@@deriving yojson { strict = false }]
  end

  module DownloadFileResponse = struct
    type t = string [@@deriving yojson { strict = false }]
  end

  module PathParamAssistantId = struct
    type t = string [@@deriving yojson { strict = false }]
  end

  module PathParamFileId = struct
    type t = string [@@deriving yojson { strict = false }]
  end

  module PathParamFineTuningJobId = struct
    type t = string [@@deriving yojson { strict = false }]
  end

  module PathParamMessageId = struct
    type t = string [@@deriving yojson { strict = false }]
  end

  module PathParamModel = struct
    type t = string [@@deriving yojson { strict = false }]
  end

  module PathParamRunId = struct
    type t = string [@@deriving yojson { strict = false }]
  end

  module PathParamStepId = struct
    type t = string [@@deriving yojson { strict = false }]
  end

  module PathParamThreadId = struct
    type t = string [@@deriving yojson { strict = false }]
  end

  module QueryParamAfter = struct
    type t = string [@@deriving yojson { strict = false }]
  end

  module QueryParamBefore = struct
    type t = string [@@deriving yojson { strict = false }]
  end

  module QueryParamLimit = struct
    type t = int [@@deriving yojson { strict = false }]
  end

  module QueryParamOrder = struct
    type t = string [@@deriving yojson { strict = false }]
  end

  module QueryParamPurpose = struct
    type t = string [@@deriving yojson { strict = false }]
  end
end

let base_url = "https://api.openai.com/v1"

module Make (Client : Oooapi_lib.Client) (Config : Oooapi_lib.Config) = struct
  open Oooapi_lib.Cohttp_client (Config)

  let get_message_file ~file_id ~message_id ~thread_id () =
    let path =
      [ "threads"; thread_id; "messages"; message_id; "files"; file_id ]
    in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.MessageFileObject.of_yojson in
    let data = None in
    make_request `GET ~base_url ~path ~params ~headers ~decode ?data

  let list_message_files
      ?after
      ?before
      ?(limit = 20)
      ?(order = "desc")
      ~message_id
      ~thread_id
      () =
    let path = [ "threads"; thread_id; "messages"; message_id; "files" ] in
    let params =
      List.filter_map
        Fun.id
        [ Option.map (fun p -> "after", (fun x -> x) p) after
        ; Option.map (fun p -> "before", (fun x -> x) p) before
        ; Some ("limit", string_of_int limit)
        ; Some ("order", (fun x -> x) order)
        ]
    in
    let headers = [] in
    let decode = of_json_string Data.ListMessageFilesResponse.of_yojson in
    let data = None in
    make_request `GET ~base_url ~path ~params ~headers ~decode ?data

  let get_assistant_file ~assistant_id ~file_id () =
    let path = [ "assistants"; assistant_id; "files"; file_id ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.AssistantFileObject.of_yojson in
    let data = None in
    make_request `GET ~base_url ~path ~params ~headers ~decode ?data

  let delete_assistant_file ~assistant_id ~file_id () =
    let path = [ "assistants"; assistant_id; "files"; file_id ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.DeleteAssistantFileResponse.of_yojson in
    let data = None in
    make_request `DELETE ~base_url ~path ~params ~headers ~decode ?data

  let list_assistant_files
      ?after
      ?before
      ?(limit = 20)
      ?(order = "desc")
      ~assistant_id
      () =
    let path = [ "assistants"; assistant_id; "files" ] in
    let params =
      List.filter_map
        Fun.id
        [ Option.map (fun p -> "after", (fun x -> x) p) after
        ; Option.map (fun p -> "before", (fun x -> x) p) before
        ; Some ("limit", string_of_int limit)
        ; Some ("order", (fun x -> x) order)
        ]
    in
    let headers = [] in
    let decode = of_json_string Data.ListAssistantFilesResponse.of_yojson in
    let data = None in
    make_request `GET ~base_url ~path ~params ~headers ~decode ?data

  let create_assistant_file ~assistant_id data =
    let path = [ "assistants"; assistant_id; "files" ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.AssistantFileObject.of_yojson in
    let data = Some (`Json (Data.CreateAssistantFileRequest.to_yojson data)) in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let get_run_step ~run_id ~step_id ~thread_id () =
    let path = [ "threads"; thread_id; "runs"; run_id; "steps"; step_id ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.RunStepObject.of_yojson in
    let data = None in
    make_request `GET ~base_url ~path ~params ~headers ~decode ?data

  let list_run_steps
      ?after
      ?before
      ?(limit = 20)
      ?(order = "desc")
      ~run_id
      ~thread_id
      () =
    let path = [ "threads"; thread_id; "runs"; run_id; "steps" ] in
    let params =
      List.filter_map
        Fun.id
        [ Option.map (fun p -> "after", (fun x -> x) p) after
        ; Option.map (fun p -> "before", (fun x -> x) p) before
        ; Some ("limit", string_of_int limit)
        ; Some ("order", (fun x -> x) order)
        ]
    in
    let headers = [] in
    let decode = of_json_string Data.ListRunStepsResponse.of_yojson in
    let data = None in
    make_request `GET ~base_url ~path ~params ~headers ~decode ?data

  let cancel_run ~run_id ~thread_id () =
    let path = [ "threads"; thread_id; "runs"; run_id; "cancel" ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.RunObject.of_yojson in
    let data = None in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let submit_tool_ouputs_to_run ~run_id ~thread_id data =
    let path =
      [ "threads"; thread_id; "runs"; run_id; "submit_tool_outputs" ]
    in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.RunObject.of_yojson in
    let data = Some (`Json (Data.SubmitToolOutputsRunRequest.to_yojson data)) in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let get_run ~run_id ~thread_id () =
    let path = [ "threads"; thread_id; "runs"; run_id ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.RunObject.of_yojson in
    let data = None in
    make_request `GET ~base_url ~path ~params ~headers ~decode ?data

  let modify_run ~run_id ~thread_id data =
    let path = [ "threads"; thread_id; "runs"; run_id ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.RunObject.of_yojson in
    let data = Some (`Json (Data.ModifyRunRequest.to_yojson data)) in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let list_runs ?after ?before ?(limit = 20) ?(order = "desc") ~thread_id () =
    let path = [ "threads"; thread_id; "runs" ] in
    let params =
      List.filter_map
        Fun.id
        [ Option.map (fun p -> "after", (fun x -> x) p) after
        ; Option.map (fun p -> "before", (fun x -> x) p) before
        ; Some ("limit", string_of_int limit)
        ; Some ("order", (fun x -> x) order)
        ]
    in
    let headers = [] in
    let decode = of_json_string Data.ListRunsResponse.of_yojson in
    let data = None in
    make_request `GET ~base_url ~path ~params ~headers ~decode ?data

  let create_run ~thread_id data =
    let path = [ "threads"; thread_id; "runs" ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.RunObject.of_yojson in
    let data = Some (`Json (Data.CreateRunRequest.to_yojson data)) in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let create_thread_and_run data =
    let path = [ "threads"; "runs" ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.RunObject.of_yojson in
    let data = Some (`Json (Data.CreateThreadAndRunRequest.to_yojson data)) in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let get_message ~message_id ~thread_id () =
    let path = [ "threads"; thread_id; "messages"; message_id ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.MessageObject.of_yojson in
    let data = None in
    make_request `GET ~base_url ~path ~params ~headers ~decode ?data

  let modify_message ~message_id ~thread_id data =
    let path = [ "threads"; thread_id; "messages"; message_id ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.MessageObject.of_yojson in
    let data = Some (`Json (Data.ModifyMessageRequest.to_yojson data)) in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let list_messages ?after ?before ?(limit = 20) ?(order = "desc") ~thread_id ()
      =
    let path = [ "threads"; thread_id; "messages" ] in
    let params =
      List.filter_map
        Fun.id
        [ Option.map (fun p -> "after", (fun x -> x) p) after
        ; Option.map (fun p -> "before", (fun x -> x) p) before
        ; Some ("limit", string_of_int limit)
        ; Some ("order", (fun x -> x) order)
        ]
    in
    let headers = [] in
    let decode = of_json_string Data.ListMessagesResponse.of_yojson in
    let data = None in
    make_request `GET ~base_url ~path ~params ~headers ~decode ?data

  let create_message ~thread_id data =
    let path = [ "threads"; thread_id; "messages" ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.MessageObject.of_yojson in
    let data = Some (`Json (Data.CreateMessageRequest.to_yojson data)) in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let get_thread ~thread_id () =
    let path = [ "threads"; thread_id ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.ThreadObject.of_yojson in
    let data = None in
    make_request `GET ~base_url ~path ~params ~headers ~decode ?data

  let modify_thread ~thread_id data =
    let path = [ "threads"; thread_id ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.ThreadObject.of_yojson in
    let data = Some (`Json (Data.ModifyThreadRequest.to_yojson data)) in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let delete_thread ~thread_id () =
    let path = [ "threads"; thread_id ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.DeleteThreadResponse.of_yojson in
    let data = None in
    make_request `DELETE ~base_url ~path ~params ~headers ~decode ?data

  let create_thread data =
    let path = [ "threads" ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.ThreadObject.of_yojson in
    let data = Some (`Json (Data.CreateThreadRequest.to_yojson data)) in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let get_assistant ~assistant_id () =
    let path = [ "assistants"; assistant_id ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.AssistantObject.of_yojson in
    let data = None in
    make_request `GET ~base_url ~path ~params ~headers ~decode ?data

  let modify_assistant ~assistant_id data =
    let path = [ "assistants"; assistant_id ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.AssistantObject.of_yojson in
    let data = Some (`Json (Data.ModifyAssistantRequest.to_yojson data)) in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let delete_assistant ~assistant_id () =
    let path = [ "assistants"; assistant_id ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.DeleteAssistantResponse.of_yojson in
    let data = None in
    make_request `DELETE ~base_url ~path ~params ~headers ~decode ?data

  let list_assistants ?after ?before ?(limit = 20) ?(order = "desc") () =
    let path = [ "assistants" ] in
    let params =
      List.filter_map
        Fun.id
        [ Option.map (fun p -> "after", (fun x -> x) p) after
        ; Option.map (fun p -> "before", (fun x -> x) p) before
        ; Some ("limit", string_of_int limit)
        ; Some ("order", (fun x -> x) order)
        ]
    in
    let headers = [] in
    let decode = of_json_string Data.ListAssistantsResponse.of_yojson in
    let data = None in
    make_request `GET ~base_url ~path ~params ~headers ~decode ?data

  let create_assistant data =
    let path = [ "assistants" ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.AssistantObject.of_yojson in
    let data = Some (`Json (Data.CreateAssistantRequest.to_yojson data)) in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let create_moderation data =
    let path = [ "moderations" ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.CreateModerationResponse.of_yojson in
    let data = Some (`Json (Data.CreateModerationRequest.to_yojson data)) in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let retrieve_model ~model () =
    let path = [ "models"; model ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.Model.of_yojson in
    let data = None in
    make_request `GET ~base_url ~path ~params ~headers ~decode ?data

  let delete_model ~model () =
    let path = [ "models"; model ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.DeleteModelResponse.of_yojson in
    let data = None in
    make_request `DELETE ~base_url ~path ~params ~headers ~decode ?data

  let list_models () =
    let path = [ "models" ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.ListModelsResponse.of_yojson in
    let data = None in
    make_request `GET ~base_url ~path ~params ~headers ~decode ?data

  let cancel_fine_tuning_job ~fine_tuning_job_id () =
    let path = [ "fine_tuning"; "jobs"; fine_tuning_job_id; "cancel" ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.FineTuningJob.of_yojson in
    let data = None in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let list_fine_tuning_events ?after ?(limit = 20) ~fine_tuning_job_id () =
    let path = [ "fine_tuning"; "jobs"; fine_tuning_job_id; "events" ] in
    let params =
      List.filter_map
        Fun.id
        [ Option.map (fun p -> "after", (fun x -> x) p) after
        ; Some ("limit", string_of_int limit)
        ]
    in
    let headers = [] in
    let decode =
      of_json_string Data.ListFineTuningJobEventsResponse.of_yojson
    in
    let data = None in
    make_request `GET ~base_url ~path ~params ~headers ~decode ?data

  let retrieve_fine_tuning_job ~fine_tuning_job_id () =
    let path = [ "fine_tuning"; "jobs"; fine_tuning_job_id ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.FineTuningJob.of_yojson in
    let data = None in
    make_request `GET ~base_url ~path ~params ~headers ~decode ?data

  let list_paginated_fine_tuning_jobs ?after ?(limit = 20) () =
    let path = [ "fine_tuning"; "jobs" ] in
    let params =
      List.filter_map
        Fun.id
        [ Option.map (fun p -> "after", (fun x -> x) p) after
        ; Some ("limit", string_of_int limit)
        ]
    in
    let headers = [] in
    let decode =
      of_json_string Data.ListPaginatedFineTuningJobsResponse.of_yojson
    in
    let data = None in
    make_request `GET ~base_url ~path ~params ~headers ~decode ?data

  let create_fine_tuning_job data =
    let path = [ "fine_tuning"; "jobs" ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.FineTuningJob.of_yojson in
    let data = Some (`Json (Data.CreateFineTuningJobRequest.to_yojson data)) in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let download_file ~file_id () =
    let path = [ "files"; file_id; "content" ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.DownloadFileResponse.of_yojson in
    let data = None in
    make_request `GET ~base_url ~path ~params ~headers ~decode ?data

  let retrieve_file ~file_id () =
    let path = [ "files"; file_id ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.OpenAIFile.of_yojson in
    let data = None in
    make_request `GET ~base_url ~path ~params ~headers ~decode ?data

  let delete_file ~file_id () =
    let path = [ "files"; file_id ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.DeleteFileResponse.of_yojson in
    let data = None in
    make_request `DELETE ~base_url ~path ~params ~headers ~decode ?data

  let list_files ?purpose () =
    let path = [ "files" ] in
    let params =
      List.filter_map
        Fun.id
        [ Option.map (fun p -> "purpose", (fun x -> x) p) purpose ]
    in
    let headers = [] in
    let decode = of_json_string Data.ListFilesResponse.of_yojson in
    let data = None in
    make_request `GET ~base_url ~path ~params ~headers ~decode ?data

  let create_file data =
    let path = [ "files" ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.OpenAIFile.of_yojson in
    let data =
      Some (`Multipart_form (Data.CreateFileRequest.to_multipart data))
    in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let create_translation data =
    let path = [ "audio"; "translations" ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.CreateTranslationResponse.of_yojson in
    let data =
      Some (`Multipart_form (Data.CreateTranslationRequest.to_multipart data))
    in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let create_transcription data =
    let path = [ "audio"; "transcriptions" ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.CreateTranscriptionResponse.of_yojson in
    let data =
      Some (`Multipart_form (Data.CreateTranscriptionRequest.to_multipart data))
    in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let create_speech data =
    let path = [ "audio"; "speech" ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode x = Ok x in
    let data = Some (`Json (Data.CreateSpeechRequest.to_yojson data)) in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let create_embedding data =
    let path = [ "embeddings" ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.CreateEmbeddingResponse.of_yojson in
    let data = Some (`Json (Data.CreateEmbeddingRequest.to_yojson data)) in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let create_image_variation data =
    let path = [ "images"; "variations" ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.ImagesResponse.of_yojson in
    let data =
      Some
        (`Multipart_form (Data.CreateImageVariationRequest.to_multipart data))
    in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let create_image_edit data =
    let path = [ "images"; "edits" ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.ImagesResponse.of_yojson in
    let data =
      Some (`Multipart_form (Data.CreateImageEditRequest.to_multipart data))
    in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let create_image data =
    let path = [ "images"; "generations" ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.ImagesResponse.of_yojson in
    let data = Some (`Json (Data.CreateImageRequest.to_yojson data)) in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let create_completion data =
    let path = [ "completions" ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.CreateCompletionResponse.of_yojson in
    let data = Some (`Json (Data.CreateCompletionRequest.to_yojson data)) in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data

  let create_chat_completion data =
    let path = [ "chat"; "completions" ] in
    let params = List.filter_map Fun.id [] in
    let headers = [] in
    let decode = of_json_string Data.CreateChatCompletionResponse.of_yojson in
    let data = Some (`Json (Data.CreateChatCompletionRequest.to_yojson data)) in
    make_request `POST ~base_url ~path ~params ~headers ~decode ?data
end
